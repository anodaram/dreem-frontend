{
  "address": "0x9d268B40f89d990bA94391fA4d84e609a46e0Ac5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extensionId",
          "type": "uint256"
        }
      ],
      "name": "ProposalAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposalType",
          "type": "string"
        }
      ],
      "name": "ProposalSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftToAttachAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftToAttachId",
          "type": "uint256"
        }
      ],
      "name": "addExtension",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposalVotingEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extensionId",
          "type": "uint256"
        }
      ],
      "name": "getRealmLandsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "taxRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creatorShare",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftToAttachAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftToAttachId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extensionTokenId",
          "type": "uint256"
        }
      ],
      "name": "removeExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositFee_",
          "type": "uint256"
        }
      ],
      "name": "setDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee_",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taxRate_",
          "type": "uint256"
        }
      ],
      "name": "setTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "votingTime_",
          "type": "uint256"
        }
      ],
      "name": "setVotingTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "voteForProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votingPowerByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "withdrawDepositFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3cd9da691633ad8029be2610ff2aa646b3e3fba864c89f259785ff0650b80f1",
  "receipt": {
    "to": null,
    "from": "0x283DdEa5589aba63221653D9ED02aaa7D60a389B",
    "contractAddress": "0x9d268B40f89d990bA94391fA4d84e609a46e0Ac5",
    "transactionIndex": 8,
    "gasUsed": "2702231",
    "logsBloom": "0x
    "blockHash": "0x5920a1aef960b3ac525266203c0325619f538b7ab103fa6bd0fc14bce2f4a5f6",
    "transactionHash": "0xe3cd9da691633ad8029be2610ff2aa646b3e3fba864c89f259785ff0650b80f1",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 24563352,
        "transactionHash": "0xe3cd9da691633ad8029be2610ff2aa646b3e3fba864c89f259785ff0650b80f1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001333545c6c6f480000000000000000000000000000000000000000000000000a0479f355cff04a0000000000000000000000000000000000000000000006245ed6241733a4b46500000000000000000000000000000000000000000000000009f1469ef96381020000000000000000000000000000000000000000000006245ee9576b901123ad",
        "logIndex": 19,
        "blockHash": "0x5920a1aef960b3ac525266203c0325619f538b7ab103fa6bd0fc14bce2f4a5f6"
      }
    ],
    "blockNumber": 24563352,
    "cumulativeGasUsed": "4298760",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "89a74922be3f0a05d20c4bd1c84312b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"}],\"name\":\"ProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalType\",\"type\":\"string\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftToAttachAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftToAttachId\",\"type\":\"uint256\"}],\"name\":\"addExtension\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalVotingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionId\",\"type\":\"uint256\"}],\"name\":\"getRealmLandsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"taxRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftToAttachAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftToAttachId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extensionTokenId\",\"type\":\"uint256\"}],\"name\":\"removeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee_\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxRate_\",\"type\":\"uint256\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"votingTime_\",\"type\":\"uint256\"}],\"name\":\"setVotingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"voteForProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingPowerByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"withdrawDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addExtension(address,uint256)\":{\"params\":{\"nftToAttachAddress\":\"address of the NFT to attach\",\"nftToAttachId\":\"ID of the NFT to attach\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"stateVariables\":{\"_extensionRealmLands\":{\"details\":\"extension ID => realmLands address\"},\"_extensionToAddProposal\":{\"details\":\"extension ID => add proposal ID\"},\"_proposalToExtension\":{\"details\":\"remove extension proposal ID => extension ID\"},\"_proposalTypes\":{\"details\":\"proposal id => proposal type\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExtension(address,uint256)\":{\"notice\":\"Submit proposal to add an extension\"},\"removeExtension(uint256)\":{\"notice\":\"Submit proposal to remove an extension\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Realm.sol\":\"Realm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Realm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./Voting.sol\\\";\\r\\nimport \\\"./RealmLands.sol\\\";\\r\\n\\r\\ncontract Realm is ERC1155, Voting, OwnableUpgradeable {\\r\\n\\r\\n    enum ProposalTypes{ADD, REMOVE}\\r\\n\\r\\n    event ProposalSubmitted(\\r\\n        uint256 proposalId,\\r\\n        address nftAddress,\\r\\n        uint256 nftId,\\r\\n        address owner,\\r\\n        string proposalType\\r\\n    );\\r\\n\\r\\n    event ProposalAccepted(\\r\\n        uint256 proposalId,\\r\\n        address nftAddress,\\r\\n        uint256 nftId,\\r\\n        uint256 extensionId\\r\\n    );\\r\\n\\r\\n    event Voted(\\r\\n        uint256 proposalId,\\r\\n        address voter\\r\\n    );\\r\\n\\r\\n    uint256 public taxRate;\\r\\n    uint256 public protocolFee;\\r\\n\\r\\n    uint256 private _tokenId;\\r\\n    uint256 public votingTime;\\r\\n    uint256 private _creatorShare;\\r\\n    uint256 public depositFee;\\r\\n\\r\\n\\r\\n    /// @dev proposal id => proposal type\\r\\n    mapping (uint256 => ProposalTypes) private _proposalTypes;\\r\\n\\r\\n    /// @dev extension ID => add proposal ID\\r\\n    mapping (uint256 => uint256) private _extensionToAddProposal;\\r\\n\\r\\n    /// @dev remove extension proposal ID => extension ID\\r\\n    mapping (uint256 => uint256) private _proposalToExtension;\\r\\n\\r\\n    /// @dev extension ID => realmLands address\\r\\n    mapping (uint256 => address) private _extensionRealmLands;\\r\\n\\r\\n    mapping (address => mapping(uint256 => uint256)) private _deposits;\\r\\n\\r\\n    uint256 private _taxes;\\r\\n\\r\\n    uint256 private _protocolFees;\\r\\n\\r\\n    constructor() ERC1155(\\\"\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string memory uri,\\r\\n        address caller,\\r\\n        uint256 taxRate_,\\r\\n        uint256 creatorShare,\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId\\r\\n    ) external initializer onlyOwner {\\r\\n        __Ownable_init();\\r\\n\\r\\n        _setURI(uri);\\r\\n        _setTaxRate(taxRate_);\\r\\n        _setCreatorShare(creatorShare);\\r\\n        _attachNFT(nftToAttachAddress, nftToAttachId, caller);\\r\\n        _setCreatorShare(caller, creatorShare);\\r\\n        _addVotingPower(caller);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Submit proposal to add an extension\\r\\n     * @param nftToAttachAddress address of the NFT to attach\\r\\n     * @param nftToAttachId ID of the NFT to attach\\r\\n     */\\r\\n    function addExtension(\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId\\r\\n    ) public payable {\\r\\n        // Make sure that caller is owner of ERC721\\r\\n        address tokenOwner = IERC721Metadata(nftToAttachAddress).ownerOf(nftToAttachId);\\r\\n        address approvedFor = IERC721Metadata(nftToAttachAddress).getApproved(nftToAttachId);\\r\\n\\r\\n        require(tokenOwner == msg.sender, \\\"You are not the owner!\\\");\\r\\n        require(approvedFor == address(this), \\\"Realm should be approved!\\\");\\r\\n\\r\\n        // Queue proposal for voting\\r\\n        uint256 proposalId = _queueForVoting(\\r\\n            nftToAttachAddress,\\r\\n            nftToAttachId,\\r\\n            msg.sender,\\r\\n            votingTime\\r\\n        );\\r\\n\\r\\n        // save proposal type\\r\\n        _proposalTypes[proposalId] = ProposalTypes.ADD;\\r\\n\\r\\n        if (depositFee > 0) {\\r\\n            require(msg.value == depositFee, \\\"msg.value should equal depositFee!\\\");\\r\\n\\r\\n            uint256 depositFeeValue = msg.value;\\r\\n\\r\\n            if (taxRate > 0) {\\r\\n                uint256 tax = msg.value * taxRate / 10000;\\r\\n                depositFeeValue -= tax;\\r\\n                _taxes += tax;\\r\\n            }\\r\\n\\r\\n            if (protocolFee > 0) {\\r\\n                uint256 protocolFeeValue = msg.value * _protocolFees / 10000;\\r\\n                depositFeeValue -= protocolFeeValue;\\r\\n                _protocolFees += protocolFeeValue;\\r\\n            }\\r\\n\\r\\n            _deposits[msg.sender][proposalId] += depositFeeValue;\\r\\n\\r\\n        }\\r\\n\\r\\n        emit ProposalSubmitted(\\r\\n            proposalId,\\r\\n            nftToAttachAddress,\\r\\n            nftToAttachId,\\r\\n            msg.sender,\\r\\n            \\\"ADD\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Submit proposal to remove an extension\\r\\n    function removeExtension(\\r\\n        uint256 extensionTokenId\\r\\n    ) public {\\r\\n        uint256 tokenBalance = balanceOf(msg.sender, extensionTokenId);\\r\\n        require(tokenBalance > 0, \\\"You are not the owner of the extension\\\");\\r\\n\\r\\n        // Get add proposal ID to get token data\\r\\n        uint256 addProposalId = _extensionToAddProposal[extensionTokenId];\\r\\n        // Get token data\\r\\n        (address tokenAddress, uint256 tokenId, address owner) = _getTokenData(addProposalId);\\r\\n\\r\\n        // Queue for voting\\r\\n        uint256 proposalId = _queueForVoting(\\r\\n            tokenAddress,\\r\\n            tokenId,\\r\\n            owner,\\r\\n            votingTime\\r\\n        );\\r\\n\\r\\n        // Save data in mappings\\r\\n        _proposalTypes[proposalId] = ProposalTypes.REMOVE;\\r\\n        _proposalToExtension[proposalId] = extensionTokenId;\\r\\n\\r\\n        emit ProposalSubmitted(\\r\\n            proposalId,\\r\\n            tokenAddress,\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            \\\"REMOVE\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function voteForProposal(uint256 proposalId) external {\\r\\n        bool votingApproved = _voteForProposal(proposalId);\\r\\n\\r\\n        if (votingApproved) {\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.ADD) {\\r\\n\\r\\n                (address tokenAddress, uint256 tokenId, address proposer) = _getTokenData(proposalId);\\r\\n\\r\\n                uint256 newTokenId = _attachNFT(tokenAddress, tokenId, proposer);\\r\\n\\r\\n                _extensionToAddProposal[newTokenId] = proposalId;\\r\\n\\r\\n                _addVotingPower(proposer);\\r\\n\\r\\n                emit ProposalAccepted(\\r\\n                    proposalId,\\r\\n                    tokenAddress,\\r\\n                    tokenId,\\r\\n                    newTokenId\\r\\n                );\\r\\n            }\\r\\n\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.REMOVE) {\\r\\n                uint256 extensionId = _proposalToExtension[proposalId];\\r\\n\\r\\n                uint256 addProposalId = _extensionToAddProposal[extensionId];\\r\\n\\r\\n                (address tokenAddress, uint256 tokenId, address owner) = _getTokenData(addProposalId);\\r\\n\\r\\n                _unattachNFT(tokenAddress, tokenId, owner, extensionId);\\r\\n\\r\\n                _removeVotingPower(owner);\\r\\n\\r\\n                emit ProposalAccepted(\\r\\n                    proposalId,\\r\\n                    tokenAddress,\\r\\n                    tokenId,\\r\\n                    extensionId\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Voted(proposalId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setVotingTime(uint256 votingTime_) external onlyOwner {\\r\\n        votingTime = votingTime_;\\r\\n    }\\r\\n   \\r\\n    function _createRealmLands(uint256 extensionId ) internal {\\r\\n        address realmLands = address(new RealmLands());\\r\\n        _extensionRealmLands[extensionId] = realmLands;\\r\\n    }\\r\\n\\r\\n    function _attachNFT(\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        address from\\r\\n    ) internal returns(uint256) {\\r\\n\\r\\n        IERC721Metadata(collection).transferFrom(\\r\\n            from,\\r\\n            address(this),\\r\\n            tokenId\\r\\n        );\\r\\n\\r\\n        _tokenId += 1;\\r\\n\\r\\n        _mint(from, _tokenId, 1, \\\"\\\");\\r\\n\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function _unattachNFT(\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        address to,\\r\\n        uint256 extensionId\\r\\n    ) internal {\\r\\n        IERC721Metadata(collection).transferFrom(\\r\\n            address(this),\\r\\n            to,\\r\\n            tokenId\\r\\n        );\\r\\n\\r\\n        _burn(to, extensionId, 1);\\r\\n\\r\\n    }\\r\\n\\r\\n    function setTaxRate(uint256 taxRate_) external onlyOwner {\\r\\n        _setTaxRate(taxRate_);\\r\\n    }\\r\\n\\r\\n    function _setTaxRate(uint256 taxRate_) internal {\\r\\n        require(taxRate_ >= 0, \\\"taxRate must be >= than 0\\\");\\r\\n        require(taxRate_ < 10000, \\\"taxRate must be < than 10000\\\");\\r\\n        taxRate = taxRate_;\\r\\n    }\\r\\n\\r\\n    function _setCreatorShare(uint256 creatorShare_) internal {\\r\\n        require(creatorShare_ >= 0, \\\"creatorShare_ must be >= than 0\\\");\\r\\n        require(creatorShare_ < 10000, \\\"creatorShare_ must be < than 10000\\\");\\r\\n        _creatorShare = creatorShare_;\\r\\n    }\\r\\n\\r\\n    function getRealmLandsAddress(uint256 extensionId) public view returns (address) {\\r\\n        return _extensionRealmLands[extensionId];\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view override (Context, ContextUpgradeable) returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view override (Context, ContextUpgradeable) returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function setDepositFee(uint256 depositFee_) public onlyOwner {\\r\\n        depositFee = depositFee_;\\r\\n    }\\r\\n\\r\\n    function setProtocolFee(uint256 protocolFee_) public onlyOwner {\\r\\n        protocolFee = protocolFee_;\\r\\n    }\\r\\n\\r\\n    function withdrawDepositFee(uint256 proposalId) public {\\r\\n        uint256 votingEnd = getProposalVotingEnd(proposalId);\\r\\n        address votingOwner = getProposalOwner(proposalId);\\r\\n        require(votingOwner == msg.sender, \\\"You are not the owner of the proposal!\\\");\\r\\n        require(votingEnd <= block.timestamp, \\\"Voting is not finished!\\\");\\r\\n\\r\\n        uint256 depositValue = _deposits[msg.sender][proposalId];\\r\\n        payable(msg.sender).transfer(depositValue);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x47fd5b0effaab55e6c3409c7da56504cf036ec80ff104f2173f4d41edbc39384\",\"license\":\"MIT\"},\"contracts/RealmLands.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract RealmLands is ERC721, Ownable {\\r\\n    constructor() ERC721(\\\"\\\", \\\"\\\") {} \\r\\n\\r\\n    function mint(address to, uint256 tokenId) public onlyOwner {\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf051919d80e6e7a67ed1ac6a13acc0be00972dc73e61e9cbf92011ac6148bc1e\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nabstract contract Voting  {\\r\\n\\r\\n    uint256 private _votingProposalCounter;\\r\\n\\r\\n    uint256 public votingPower;\\r\\n\\r\\n    address private _creatorAddress;\\r\\n    uint256 private _creatorShare;\\r\\n\\r\\n    mapping (address => uint256) public votingPowerByAddress;\\r\\n\\r\\n    struct Proposal {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n        address owner;\\r\\n        uint256 votes;\\r\\n        uint256 votingEnd;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    mapping(address => mapping(uint256 => bool)) hasVotedForProposal;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function _addVotingPower(address owner) internal {\\r\\n        votingPower += 10000;\\r\\n\\r\\n        uint256 votingPowerCreator = 10000 * _creatorShare / 10000;\\r\\n        uint256 votingPowerOwner = 10000 - votingPowerCreator;\\r\\n\\r\\n        votingPowerByAddress[_creatorAddress] += votingPowerCreator;\\r\\n        votingPowerByAddress[owner] += votingPowerOwner;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _removeVotingPower(address owner) internal {\\r\\n        votingPower -= 10000;\\r\\n        uint256 votingPowerCreator = 10000 * _creatorShare / 10000;\\r\\n        uint256 votingPowerOwner = 10000 - votingPowerCreator;\\r\\n\\r\\n        votingPowerByAddress[_creatorAddress] += votingPowerCreator;\\r\\n        votingPowerByAddress[owner] += votingPowerOwner;\\r\\n    }\\r\\n\\r\\n    function _queueForVoting(\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId,\\r\\n        address caller,\\r\\n        uint256 votingTime_\\r\\n    ) internal returns (uint256) {\\r\\n        proposals[_votingProposalCounter] = Proposal(\\r\\n            nftToAttachAddress,\\r\\n            nftToAttachId,\\r\\n            caller,\\r\\n            0,\\r\\n            block.timestamp + votingTime_\\r\\n        );\\r\\n\\r\\n        _votingProposalCounter += 1;\\r\\n\\r\\n        return _votingProposalCounter;\\r\\n    }\\r\\n\\r\\n    function _voteForProposal(uint256 proposalId) internal returns (bool) {\\r\\n        require(\\r\\n            proposals[proposalId].tokenAddress != address(0), \\r\\n            \\\"Non existent proposal\\\"\\r\\n        );\\r\\n        require(\\r\\n            hasVotedForProposal[msg.sender][proposalId] == false,\\r\\n            \\\"Can't vote for same proposal twice!\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            proposals[proposalId].votingEnd > block.timestamp,\\r\\n            \\\"Proposal has expired\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            votingPowerByAddress[msg.sender] > 0,\\r\\n            \\\"You do not have voting power\\\"\\r\\n        );\\r\\n\\r\\n        proposals[proposalId].votes += votingPowerByAddress[msg.sender];\\r\\n\\r\\n        hasVotedForProposal[msg.sender][proposalId] = true;\\r\\n\\r\\n        if (proposals[proposalId].votes > votingPower / 2) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getTokenData(uint256 proposalId) internal view returns (address tokenAddress, uint256 tokenId, address owner) {\\r\\n        tokenAddress = proposals[proposalId].tokenAddress;\\r\\n        tokenId = proposals[proposalId].tokenId;\\r\\n        owner = proposals[proposalId].owner;\\r\\n    }\\r\\n\\r\\n    function _setCreatorShare(\\r\\n        address creatorAddress, \\r\\n        uint256 creatorShare\\r\\n    ) internal {\\r\\n        require(creatorAddress != address(0));\\r\\n        require(creatorShare > 0);\\r\\n        _creatorAddress = creatorAddress;\\r\\n        _creatorShare = creatorShare;\\r\\n    }\\r\\n\\r\\n    function getProposalVotingEnd(uint256 proposalId) public view returns (uint256) {\\r\\n        return proposals[proposalId].votingEnd;\\r\\n    }\\r\\n\\r\\n    function getProposalTokenAddress(uint256 proposalId) public view returns (address) {\\r\\n        return proposals[proposalId].tokenAddress;\\r\\n    }\\r\\n\\r\\n    function getProposalTokenId(uint256 proposalId) public view returns (uint256) {\\r\\n        return proposals[proposalId].tokenId;\\r\\n    }\\r\\n\\r\\n    function getProposalOwner(uint256 proposalId) public view returns (address) {\\r\\n        return proposals[proposalId].owner;\\r\\n    }\\r\\n\\r\\n    function getProposalVotes(uint256 proposalId) public view returns (uint256) {\\r\\n        return proposals[proposalId].votes;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1f796fd0ec21927beba6f31fdfb9436a59ef6ee172742e0b69018d6233eb92e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805160208101909152600081526200002c8162000033565b506200012f565b8051620000489060029060208401906200004c565b5050565b8280546200005a90620000f2565b90600052602060002090601f0160209004810192826200007e5760008555620000c9565b82601f106200009957805160ff1916838001178555620000c9565b82800160010185558215620000c9579182015b82811115620000c9578251825591602001919060010190620000ac565b50620000d7929150620000db565b5090565b5b80821115620000d75760008155600101620000dc565b600181811c908216806200010757607f821691505b602082108114156200012957634e487b7160e01b600052602260045260246000fd5b50919050565b612fca806200013f6000396000f3fe6080604052600436106101ed5760003560e01c806367a527931161010d578063b920ef71116100a0578063d7c819761161006f578063d7c819761461065e578063e985e9c51461067e578063f242432a146106c7578063f2fde38b146106e7578063f4b5157b1461070757600080fd5b8063b920ef71146105eb578063b92a479e1461060b578063c6d69a301461061e578063cfe6b6d01461063e57600080fd5b8063787dce3d116100dc578063787dce3d146105775780638da5cb5b14610597578063a22cb465146105b5578063b0e21e8a146105d557600080fd5b806367a5279314610520578063715018a61461053657806377174f851461054b578063771a3a1d1461056157600080fd5b80632bb5edec11610185578063490ae21011610154578063490ae2101461047d5780634df161a11461049d5780634e1273f4146104bd5780635ab24f59146104ea57600080fd5b80632bb5edec146103ca5780632eb2c2d61461040057806339997a021461042057806347c661401461044d57600080fd5b80630e89341c116101c15780630e89341c1461030657806317826ac41461033357806319be726d146103845780631cbe482d146103b457600080fd5b8062fdd58e146101f2578063013cf08b1461022557806301ffc9a7146102b4578063045c6ce0146102e4575b600080fd5b3480156101fe57600080fd5b5061021261020d3660046128da565b610737565b6040519081526020015b60405180910390f35b34801561023157600080fd5b5061027b610240366004612a9b565b600860205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949293909116919085565b604080516001600160a01b039687168152602081019590955292909416918301919091526060820152608081019190915260a00161021c565b3480156102c057600080fd5b506102d46102cf3660046129d2565b6107ce565b604051901515815260200161021c565b3480156102f057600080fd5b506103046102ff366004612a9b565b610820565b005b34801561031257600080fd5b50610326610321366004612a9b565b610a0c565b60405161021c9190612c1c565b34801561033f57600080fd5b5061036c61034e366004612a9b565b6000908152600860205260409020600201546001600160a01b031690565b6040516001600160a01b03909116815260200161021c565b34801561039057600080fd5b5061021261039f366004612a9b565b60009081526008602052604090206001015490565b3480156103c057600080fd5b5061021260725481565b3480156103d657600080fd5b5061036c6103e5366004612a9b565b6000908152607860205260409020546001600160a01b031690565b34801561040c57600080fd5b5061030461041b366004612798565b610aa0565b34801561042c57600080fd5b5061021261043b366004612728565b60076020526000908152604090205481565b34801561045957600080fd5b50610212610468366004612a9b565b60009081526008602052604090206003015490565b34801561048957600080fd5b50610304610498366004612a9b565b610b37565b3480156104a957600080fd5b506103046104b8366004612a9b565b610b66565b3480156104c957600080fd5b506104dd6104d8366004612905565b610c7d565b60405161021c9190612bdb565b3480156104f657600080fd5b5061036c610505366004612a9b565b6000908152600860205260409020546001600160a01b031690565b34801561052c57600080fd5b5061021260745481565b34801561054257600080fd5b50610304610ddf565b34801561055757600080fd5b5061021260045481565b34801561056d57600080fd5b50610212606f5481565b34801561058357600080fd5b50610304610592366004612a9b565b610e15565b3480156105a357600080fd5b50603d546001600160a01b031661036c565b3480156105c157600080fd5b506103046105d03660046128a9565b610e44565b3480156105e157600080fd5b5061021260705481565b3480156105f757600080fd5b50610304610606366004612a9b565b610e53565b6103046106193660046128da565b610f91565b34801561062a57600080fd5b50610304610639366004612a9b565b6112fe565b34801561064a57600080fd5b50610304610659366004612a0a565b611334565b34801561066a57600080fd5b50610304610679366004612a9b565b61145f565b34801561068a57600080fd5b506102d4610699366004612760565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156106d357600080fd5b506103046106e2366004612842565b61148e565b3480156106f357600080fd5b50610304610702366004612728565b611515565b34801561071357600080fd5b50610212610722366004612a9b565b60009081526008602052604090206004015490565b60006001600160a01b0383166107a85760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806107ff57506001600160e01b031982166303a24d0760e21b145b8061081a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061082b826115ad565b905080156109d05760008281526075602052604081205460ff16600181111561086457634e487b7160e01b600052602160045260246000fd5b14156108fc576000806000610878856117c5565b925092509250600061088b8484846117f1565b600081815260766020526040902087905590506108a7826118a0565b604080518781526001600160a01b0386166020820152908101849052606081018290527fb180d23f07a381509523d52a37e7da63c2b098fbccf7e84dea6b6648e062e15c9060800160405180910390a1505050505b600160008381526075602052604090205460ff16600181111561092f57634e487b7160e01b600052602160045260246000fd5b14156109d05760008281526077602090815260408083205480845260769092528220549091808061095f846117c5565b9250925092506109718383838861194d565b61097a816119c7565b604080518881526001600160a01b0385166020820152908101839052606081018690527fb180d23f07a381509523d52a37e7da63c2b098fbccf7e84dea6b6648e062e15c9060800160405180910390a150505050505b604080518381523360208201527f030b0f8dcd86a031eddb071f91882edeac8173663ba775713b677b42b51be44b910160405180910390a15050565b606060028054610a1b90612e18565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4790612e18565b8015610a945780601f10610a6957610100808354040283529160200191610a94565b820191906000526020600020905b815481529060010190602001808311610a7757829003601f168201915b50505050509050919050565b6001600160a01b038516331480610abc5750610abc8533610699565b610b235760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161079f565b610b3085858585856119db565b5050505050565b603d546001600160a01b03163314610b615760405162461bcd60e51b815260040161079f90612d06565b607455565b600081815260086020526040902060048101546002909101546001600160a01b0316338114610be65760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652070726f604482015265706f73616c2160d01b606482015260840161079f565b42821115610c365760405162461bcd60e51b815260206004820152601760248201527f566f74696e67206973206e6f742066696e697368656421000000000000000000604482015260640161079f565b33600081815260796020908152604080832087845290915280822054905190929183156108fc02918491818181858888f19350505050158015610b30573d6000803e3d6000fd5b60608151835114610ce25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161079f565b6000835167ffffffffffffffff811115610d0c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d35578160200160208202803683370190505b50905060005b8451811015610dd757610d9c858281518110610d6757634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610d8f57634e487b7160e01b600052603260045260246000fd5b6020026020010151610737565b828281518110610dbc57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610dd081612e80565b9050610d3b565b509392505050565b603d546001600160a01b03163314610e095760405162461bcd60e51b815260040161079f90612d06565b610e136000611bd4565b565b603d546001600160a01b03163314610e3f5760405162461bcd60e51b815260040161079f90612d06565b607055565b610e4f338383611c26565b5050565b6000610e5f3383610737565b905060008111610ec05760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652065787460448201526532b739b4b7b760d11b606482015260840161079f565b600082815260766020526040812054908080610edb846117c5565b9250925092506000610ef1848484607254611d07565b6000818152607560209081526040808320805460ff1916600117905560778252918290208a905581518381526001600160a01b0388169181019190915290810185905233606082015260a0608082018190526006908201526552454d4f564560d01b60c08201529091507f43bbe839ef82dc941f31c1b50c3aef00ac608996af8aaff4ac3e6e5bf6eae8749060e00160405180910390a150505050505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e9060240160206040518083038186803b158015610fd457600080fd5b505afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c9190612744565b60405163020604bf60e21b8152600481018490529091506000906001600160a01b0385169063081812fc9060240160206040518083038186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108a9190612744565b90506001600160a01b03821633146110dd5760405162461bcd60e51b8152602060048201526016602482015275596f7520617265206e6f7420746865206f776e65722160501b604482015260640161079f565b6001600160a01b03811630146111355760405162461bcd60e51b815260206004820152601960248201527f5265616c6d2073686f756c6420626520617070726f7665642100000000000000604482015260640161079f565b6000611145858533607254611d07565b6000818152607560205260409020805460ff191690556074549091501561128d5760745434146111c25760405162461bcd60e51b815260206004820152602260248201527f6d73672e76616c75652073686f756c6420657175616c206465706f7369744665604482015261652160f01b606482015260840161079f565b606f54349015611210576000612710606f54346111df9190612de2565b6111e99190612dc2565b90506111f58183612e01565b915080607a60008282546112099190612daa565b9091555050505b6070541561125c576000612710607b543461122b9190612de2565b6112359190612dc2565b90506112418183612e01565b915080607b60008282546112559190612daa565b9091555050505b33600090815260796020908152604080832085845290915281208054839290611286908490612daa565b9091555050505b604080518281526001600160a01b038716602082015290810185905233606082015260a0608082018190526003908201526210511160ea1b60c08201527f43bbe839ef82dc941f31c1b50c3aef00ac608996af8aaff4ac3e6e5bf6eae8749060e00160405180910390a15050505050565b603d546001600160a01b031633146113285760405162461bcd60e51b815260040161079f90612d06565b61133181611dd3565b50565b600a54610100900460ff1661134f57600a5460ff1615611353565b303b155b6113b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161079f565b600a54610100900460ff161580156113d857600a805461ffff19166101011790555b603d546001600160a01b031633146114025760405162461bcd60e51b815260040161079f90612d06565b61140a611e29565b61141387611e60565b61141c85611dd3565b61142584611e73565b6114308383886117f1565b5061143b8685611ed4565b611444866118a0565b801561145657600a805461ff00191690555b50505050505050565b603d546001600160a01b031633146114895760405162461bcd60e51b815260040161079f90612d06565b607255565b6001600160a01b0385163314806114aa57506114aa8533610699565b6115085760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161079f565b610b308585858585611f1a565b603d546001600160a01b0316331461153f5760405162461bcd60e51b815260040161079f90612d06565b6001600160a01b0381166115a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161079f565b61133181611bd4565b6000818152600860205260408120546001600160a01b03166116095760405162461bcd60e51b8152602060048201526015602482015274139bdb88195e1a5cdd195b9d081c1c9bdc1bdcd85b605a1b604482015260640161079f565b33600090815260096020908152604080832085845290915290205460ff16156116805760405162461bcd60e51b815260206004820152602360248201527f43616e277420766f746520666f722073616d652070726f706f73616c2074776960448201526263652160e81b606482015260840161079f565b60008281526008602052604090206004015442106116d75760405162461bcd60e51b8152602060048201526014602482015273141c9bdc1bdcd85b081a185cc8195e1c1a5c995960621b604482015260640161079f565b336000908152600760205260409020546117335760405162461bcd60e51b815260206004820152601c60248201527f596f7520646f206e6f74206861766520766f74696e6720706f77657200000000604482015260640161079f565b3360009081526007602090815260408083205485845260089092528220600301805491929091611764908490612daa565b90915550503360009081526009602090815260408083208584529091529020805460ff1916600117905560045461179d90600290612dc2565b60008381526008602052604090206003015411156117bd57506001919050565b506000919050565b6000908152600860205260409020805460018201546002909201546001600160a01b0391821693911690565b6040516323b872dd60e01b81526001600160a01b03828116600483015230602483015260448201849052600091908516906323b872dd90606401600060405180830381600087803b15801561184557600080fd5b505af1158015611859573d6000803e3d6000fd5b505050506001607160008282546118709190612daa565b9250508190555061189582607154600160405180602001604052806000815250612037565b506071549392505050565b612710600460008282546118b49190612daa565b9091555050600654600090612710906118cd9082612de2565b6118d79190612dc2565b905060006118e782612710612e01565b6005546001600160a01b0316600090815260076020526040812080549293508492909190611916908490612daa565b90915550506001600160a01b03831660009081526007602052604081208054839290611943908490612daa565b9091555050505050565b6040516323b872dd60e01b81523060048201526001600160a01b038381166024830152604482018590528516906323b872dd90606401600060405180830381600087803b15801561199d57600080fd5b505af11580156119b1573d6000803e3d6000fd5b505050506119c182826001612138565b50505050565b612710600460008282546118b49190612e01565b8151835114611a3d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161079f565b6001600160a01b038416611a635760405162461bcd60e51b815260040161079f90612c77565b3360005b8451811015611b66576000858281518110611a9257634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611abe57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611b0e5760405162461bcd60e51b815260040161079f90612cbc565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611b4b908490612daa565b9250508190555050505080611b5f90612e80565b9050611a67565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611bb6929190612bee565b60405180910390a4611bcc8187878787876122b2565b505050505050565b603d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611c9a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161079f565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006040518060a00160405280866001600160a01b03168152602001858152602001846001600160a01b03168152602001600081526020018342611d4b9190612daa565b9052600380546000908152600860209081526040808320855181546001600160a01b03199081166001600160a01b0392831617835593870151600180840191909155928701516002830180549095169116179092556060850151828501556080909401516004909101558154611dc2908490612daa565b909155505060035495945050505050565b6127108110611e245760405162461bcd60e51b815260206004820152601c60248201527f74617852617465206d757374206265203c207468616e20313030303000000000604482015260640161079f565b606f55565b600a54610100900460ff16611e505760405162461bcd60e51b815260040161079f90612d3b565b611e5861241d565b610e13612444565b8051610e4f906002906020840190612597565b6127108110611ecf5760405162461bcd60e51b815260206004820152602260248201527f63726561746f7253686172655f206d757374206265203c207468616e20313030604482015261030360f41b606482015260840161079f565b607355565b6001600160a01b038216611ee757600080fd5b60008111611ef457600080fd5b600580546001600160a01b0319166001600160a01b039390931692909217909155600655565b6001600160a01b038416611f405760405162461bcd60e51b815260040161079f90612c77565b33611f59818787611f5088612474565b610b3088612474565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611f9a5760405162461bcd60e51b815260040161079f90612cbc565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611fd7908490612daa565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46114568288888888886124cd565b6001600160a01b0384166120975760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161079f565b336120a881600087611f5088612474565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906120d8908490612daa565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b30816000878787876124cd565b6001600160a01b03831661219a5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161079f565b336121ca818560006121ab87612474565b6121b487612474565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156122475760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161079f565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b15611bcc5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122f69089908990889088908890600401612b38565b602060405180830381600087803b15801561231057600080fd5b505af1925050508015612340575060408051601f3d908101601f1916820190925261233d918101906129ee565b60015b6123ed5761234c612ec7565b806308c379a014156123865750612361612edf565b8061236c5750612388565b8060405162461bcd60e51b815260040161079f9190612c1c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161079f565b6001600160e01b0319811663bc197c8160e01b146114565760405162461bcd60e51b815260040161079f90612c2f565b600a54610100900460ff16610e135760405162461bcd60e51b815260040161079f90612d3b565b600a54610100900460ff1661246b5760405162461bcd60e51b815260040161079f90612d3b565b610e1333611bd4565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124bc57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611bcc5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906125119089908990889088908890600401612b96565b602060405180830381600087803b15801561252b57600080fd5b505af192505050801561255b575060408051601f3d908101601f19168201909252612558918101906129ee565b60015b6125675761234c612ec7565b6001600160e01b0319811663f23a6e6160e01b146114565760405162461bcd60e51b815260040161079f90612c2f565b8280546125a390612e18565b90600052602060002090601f0160209004810192826125c5576000855561260b565b82601f106125de57805160ff191683800117855561260b565b8280016001018555821561260b579182015b8281111561260b5782518255916020019190600101906125f0565b5061261792915061261b565b5090565b5b80821115612617576000815560010161261c565b600067ffffffffffffffff83111561264a5761264a612eb1565b604051612661601f8501601f191660200182612e53565b80915083815284848401111561267657600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261269e578081fd5b813560206126ab82612d86565b6040516126b88282612e53565b8381528281019150858301600585901b870184018810156126d7578586fd5b855b858110156126f5578135845292840192908401906001016126d9565b5090979650505050505050565b600082601f830112612712578081fd5b61272183833560208501612630565b9392505050565b600060208284031215612739578081fd5b813561272181612f69565b600060208284031215612755578081fd5b815161272181612f69565b60008060408385031215612772578081fd5b823561277d81612f69565b9150602083013561278d81612f69565b809150509250929050565b600080600080600060a086880312156127af578081fd5b85356127ba81612f69565b945060208601356127ca81612f69565b9350604086013567ffffffffffffffff808211156127e6578283fd5b6127f289838a0161268e565b94506060880135915080821115612807578283fd5b61281389838a0161268e565b93506080880135915080821115612828578283fd5b5061283588828901612702565b9150509295509295909350565b600080600080600060a08688031215612859578081fd5b853561286481612f69565b9450602086013561287481612f69565b93506040860135925060608601359150608086013567ffffffffffffffff81111561289d578182fd5b61283588828901612702565b600080604083850312156128bb578182fd5b82356128c681612f69565b91506020830135801515811461278d578182fd5b600080604083850312156128ec578182fd5b82356128f781612f69565b946020939093013593505050565b60008060408385031215612917578182fd5b823567ffffffffffffffff8082111561292e578384fd5b818501915085601f830112612941578384fd5b8135602061294e82612d86565b60405161295b8282612e53565b8381528281019150858301600585901b870184018b101561297a578889fd5b8896505b848710156129a557803561299181612f69565b83526001969096019591830191830161297e565b50965050860135925050808211156129bb578283fd5b506129c88582860161268e565b9150509250929050565b6000602082840312156129e3578081fd5b813561272181612f7e565b6000602082840312156129ff578081fd5b815161272181612f7e565b60008060008060008060c08789031215612a22578384fd5b863567ffffffffffffffff811115612a38578485fd5b8701601f81018913612a48578485fd5b612a5789823560208401612630565b9650506020870135612a6881612f69565b945060408701359350606087013592506080870135612a8681612f69565b8092505060a087013590509295509295509295565b600060208284031215612aac578081fd5b5035919050565b6000815180845260208085019450808401835b83811015612ae257815187529582019590820190600101612ac6565b509495945050505050565b60008151808452815b81811015612b1257602081850181015186830182015201612af6565b81811115612b235782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612b6490830186612ab3565b8281036060840152612b768186612ab3565b90508281036080840152612b8a8185612aed565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612bd090830184612aed565b979650505050505050565b6020815260006127216020830184612ab3565b604081526000612c016040830185612ab3565b8281036020840152612c138185612ab3565b95945050505050565b6020815260006127216020830184612aed565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600067ffffffffffffffff821115612da057612da0612eb1565b5060051b60200190565b60008219821115612dbd57612dbd612e9b565b500190565b600082612ddd57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612dfc57612dfc612e9b565b500290565b600082821015612e1357612e13612e9b565b500390565b600181811c90821680612e2c57607f821691505b60208210811415612e4d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715612e7957612e79612eb1565b6040525050565b6000600019821415612e9457612e94612e9b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612edc57600481823e5160e01c5b90565b600060443d1015612eed5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612f1d57505050505090565b8285019150815181811115612f355750505050505090565b843d8701016020828501011115612f4f5750505050505090565b612f5e60208286010187612e53565b509095945050505050565b6001600160a01b038116811461133157600080fd5b6001600160e01b03198116811461133157600080fdfea2646970667358221220507e86b9aab8c237dba6ff790ac960f7bcd3e6042e872f9bafc570f0540d354e64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101ed5760003560e01c806367a527931161010d578063b920ef71116100a0578063d7c819761161006f578063d7c819761461065e578063e985e9c51461067e578063f242432a146106c7578063f2fde38b146106e7578063f4b5157b1461070757600080fd5b8063b920ef71146105eb578063b92a479e1461060b578063c6d69a301461061e578063cfe6b6d01461063e57600080fd5b8063787dce3d116100dc578063787dce3d146105775780638da5cb5b14610597578063a22cb465146105b5578063b0e21e8a146105d557600080fd5b806367a5279314610520578063715018a61461053657806377174f851461054b578063771a3a1d1461056157600080fd5b80632bb5edec11610185578063490ae21011610154578063490ae2101461047d5780634df161a11461049d5780634e1273f4146104bd5780635ab24f59146104ea57600080fd5b80632bb5edec146103ca5780632eb2c2d61461040057806339997a021461042057806347c661401461044d57600080fd5b80630e89341c116101c15780630e89341c1461030657806317826ac41461033357806319be726d146103845780631cbe482d146103b457600080fd5b8062fdd58e146101f2578063013cf08b1461022557806301ffc9a7146102b4578063045c6ce0146102e4575b600080fd5b3480156101fe57600080fd5b5061021261020d3660046128da565b610737565b6040519081526020015b60405180910390f35b34801561023157600080fd5b5061027b610240366004612a9b565b600860205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949293909116919085565b604080516001600160a01b039687168152602081019590955292909416918301919091526060820152608081019190915260a00161021c565b3480156102c057600080fd5b506102d46102cf3660046129d2565b6107ce565b604051901515815260200161021c565b3480156102f057600080fd5b506103046102ff366004612a9b565b610820565b005b34801561031257600080fd5b50610326610321366004612a9b565b610a0c565b60405161021c9190612c1c565b34801561033f57600080fd5b5061036c61034e366004612a9b565b6000908152600860205260409020600201546001600160a01b031690565b6040516001600160a01b03909116815260200161021c565b34801561039057600080fd5b5061021261039f366004612a9b565b60009081526008602052604090206001015490565b3480156103c057600080fd5b5061021260725481565b3480156103d657600080fd5b5061036c6103e5366004612a9b565b6000908152607860205260409020546001600160a01b031690565b34801561040c57600080fd5b5061030461041b366004612798565b610aa0565b34801561042c57600080fd5b5061021261043b366004612728565b60076020526000908152604090205481565b34801561045957600080fd5b50610212610468366004612a9b565b60009081526008602052604090206003015490565b34801561048957600080fd5b50610304610498366004612a9b565b610b37565b3480156104a957600080fd5b506103046104b8366004612a9b565b610b66565b3480156104c957600080fd5b506104dd6104d8366004612905565b610c7d565b60405161021c9190612bdb565b3480156104f657600080fd5b5061036c610505366004612a9b565b6000908152600860205260409020546001600160a01b031690565b34801561052c57600080fd5b5061021260745481565b34801561054257600080fd5b50610304610ddf565b34801561055757600080fd5b5061021260045481565b34801561056d57600080fd5b50610212606f5481565b34801561058357600080fd5b50610304610592366004612a9b565b610e15565b3480156105a357600080fd5b50603d546001600160a01b031661036c565b3480156105c157600080fd5b506103046105d03660046128a9565b610e44565b3480156105e157600080fd5b5061021260705481565b3480156105f757600080fd5b50610304610606366004612a9b565b610e53565b6103046106193660046128da565b610f91565b34801561062a57600080fd5b50610304610639366004612a9b565b6112fe565b34801561064a57600080fd5b50610304610659366004612a0a565b611334565b34801561066a57600080fd5b50610304610679366004612a9b565b61145f565b34801561068a57600080fd5b506102d4610699366004612760565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156106d357600080fd5b506103046106e2366004612842565b61148e565b3480156106f357600080fd5b50610304610702366004612728565b611515565b34801561071357600080fd5b50610212610722366004612a9b565b60009081526008602052604090206004015490565b60006001600160a01b0383166107a85760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806107ff57506001600160e01b031982166303a24d0760e21b145b8061081a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600061082b826115ad565b905080156109d05760008281526075602052604081205460ff16600181111561086457634e487b7160e01b600052602160045260246000fd5b14156108fc576000806000610878856117c5565b925092509250600061088b8484846117f1565b600081815260766020526040902087905590506108a7826118a0565b604080518781526001600160a01b0386166020820152908101849052606081018290527fb180d23f07a381509523d52a37e7da63c2b098fbccf7e84dea6b6648e062e15c9060800160405180910390a1505050505b600160008381526075602052604090205460ff16600181111561092f57634e487b7160e01b600052602160045260246000fd5b14156109d05760008281526077602090815260408083205480845260769092528220549091808061095f846117c5565b9250925092506109718383838861194d565b61097a816119c7565b604080518881526001600160a01b0385166020820152908101839052606081018690527fb180d23f07a381509523d52a37e7da63c2b098fbccf7e84dea6b6648e062e15c9060800160405180910390a150505050505b604080518381523360208201527f030b0f8dcd86a031eddb071f91882edeac8173663ba775713b677b42b51be44b910160405180910390a15050565b606060028054610a1b90612e18565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4790612e18565b8015610a945780601f10610a6957610100808354040283529160200191610a94565b820191906000526020600020905b815481529060010190602001808311610a7757829003601f168201915b50505050509050919050565b6001600160a01b038516331480610abc5750610abc8533610699565b610b235760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161079f565b610b3085858585856119db565b5050505050565b603d546001600160a01b03163314610b615760405162461bcd60e51b815260040161079f90612d06565b607455565b600081815260086020526040902060048101546002909101546001600160a01b0316338114610be65760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652070726f604482015265706f73616c2160d01b606482015260840161079f565b42821115610c365760405162461bcd60e51b815260206004820152601760248201527f566f74696e67206973206e6f742066696e697368656421000000000000000000604482015260640161079f565b33600081815260796020908152604080832087845290915280822054905190929183156108fc02918491818181858888f19350505050158015610b30573d6000803e3d6000fd5b60608151835114610ce25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161079f565b6000835167ffffffffffffffff811115610d0c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d35578160200160208202803683370190505b50905060005b8451811015610dd757610d9c858281518110610d6757634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610d8f57634e487b7160e01b600052603260045260246000fd5b6020026020010151610737565b828281518110610dbc57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610dd081612e80565b9050610d3b565b509392505050565b603d546001600160a01b03163314610e095760405162461bcd60e51b815260040161079f90612d06565b610e136000611bd4565b565b603d546001600160a01b03163314610e3f5760405162461bcd60e51b815260040161079f90612d06565b607055565b610e4f338383611c26565b5050565b6000610e5f3383610737565b905060008111610ec05760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652065787460448201526532b739b4b7b760d11b606482015260840161079f565b600082815260766020526040812054908080610edb846117c5565b9250925092506000610ef1848484607254611d07565b6000818152607560209081526040808320805460ff1916600117905560778252918290208a905581518381526001600160a01b0388169181019190915290810185905233606082015260a0608082018190526006908201526552454d4f564560d01b60c08201529091507f43bbe839ef82dc941f31c1b50c3aef00ac608996af8aaff4ac3e6e5bf6eae8749060e00160405180910390a150505050505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e9060240160206040518083038186803b158015610fd457600080fd5b505afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c9190612744565b60405163020604bf60e21b8152600481018490529091506000906001600160a01b0385169063081812fc9060240160206040518083038186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108a9190612744565b90506001600160a01b03821633146110dd5760405162461bcd60e51b8152602060048201526016602482015275596f7520617265206e6f7420746865206f776e65722160501b604482015260640161079f565b6001600160a01b03811630146111355760405162461bcd60e51b815260206004820152601960248201527f5265616c6d2073686f756c6420626520617070726f7665642100000000000000604482015260640161079f565b6000611145858533607254611d07565b6000818152607560205260409020805460ff191690556074549091501561128d5760745434146111c25760405162461bcd60e51b815260206004820152602260248201527f6d73672e76616c75652073686f756c6420657175616c206465706f7369744665604482015261652160f01b606482015260840161079f565b606f54349015611210576000612710606f54346111df9190612de2565b6111e99190612dc2565b90506111f58183612e01565b915080607a60008282546112099190612daa565b9091555050505b6070541561125c576000612710607b543461122b9190612de2565b6112359190612dc2565b90506112418183612e01565b915080607b60008282546112559190612daa565b9091555050505b33600090815260796020908152604080832085845290915281208054839290611286908490612daa565b9091555050505b604080518281526001600160a01b038716602082015290810185905233606082015260a0608082018190526003908201526210511160ea1b60c08201527f43bbe839ef82dc941f31c1b50c3aef00ac608996af8aaff4ac3e6e5bf6eae8749060e00160405180910390a15050505050565b603d546001600160a01b031633146113285760405162461bcd60e51b815260040161079f90612d06565b61133181611dd3565b50565b600a54610100900460ff1661134f57600a5460ff1615611353565b303b155b6113b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161079f565b600a54610100900460ff161580156113d857600a805461ffff19166101011790555b603d546001600160a01b031633146114025760405162461bcd60e51b815260040161079f90612d06565b61140a611e29565b61141387611e60565b61141c85611dd3565b61142584611e73565b6114308383886117f1565b5061143b8685611ed4565b611444866118a0565b801561145657600a805461ff00191690555b50505050505050565b603d546001600160a01b031633146114895760405162461bcd60e51b815260040161079f90612d06565b607255565b6001600160a01b0385163314806114aa57506114aa8533610699565b6115085760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161079f565b610b308585858585611f1a565b603d546001600160a01b0316331461153f5760405162461bcd60e51b815260040161079f90612d06565b6001600160a01b0381166115a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161079f565b61133181611bd4565b6000818152600860205260408120546001600160a01b03166116095760405162461bcd60e51b8152602060048201526015602482015274139bdb88195e1a5cdd195b9d081c1c9bdc1bdcd85b605a1b604482015260640161079f565b33600090815260096020908152604080832085845290915290205460ff16156116805760405162461bcd60e51b815260206004820152602360248201527f43616e277420766f746520666f722073616d652070726f706f73616c2074776960448201526263652160e81b606482015260840161079f565b60008281526008602052604090206004015442106116d75760405162461bcd60e51b8152602060048201526014602482015273141c9bdc1bdcd85b081a185cc8195e1c1a5c995960621b604482015260640161079f565b336000908152600760205260409020546117335760405162461bcd60e51b815260206004820152601c60248201527f596f7520646f206e6f74206861766520766f74696e6720706f77657200000000604482015260640161079f565b3360009081526007602090815260408083205485845260089092528220600301805491929091611764908490612daa565b90915550503360009081526009602090815260408083208584529091529020805460ff1916600117905560045461179d90600290612dc2565b60008381526008602052604090206003015411156117bd57506001919050565b506000919050565b6000908152600860205260409020805460018201546002909201546001600160a01b0391821693911690565b6040516323b872dd60e01b81526001600160a01b03828116600483015230602483015260448201849052600091908516906323b872dd90606401600060405180830381600087803b15801561184557600080fd5b505af1158015611859573d6000803e3d6000fd5b505050506001607160008282546118709190612daa565b9250508190555061189582607154600160405180602001604052806000815250612037565b506071549392505050565b612710600460008282546118b49190612daa565b9091555050600654600090612710906118cd9082612de2565b6118d79190612dc2565b905060006118e782612710612e01565b6005546001600160a01b0316600090815260076020526040812080549293508492909190611916908490612daa565b90915550506001600160a01b03831660009081526007602052604081208054839290611943908490612daa565b9091555050505050565b6040516323b872dd60e01b81523060048201526001600160a01b038381166024830152604482018590528516906323b872dd90606401600060405180830381600087803b15801561199d57600080fd5b505af11580156119b1573d6000803e3d6000fd5b505050506119c182826001612138565b50505050565b612710600460008282546118b49190612e01565b8151835114611a3d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161079f565b6001600160a01b038416611a635760405162461bcd60e51b815260040161079f90612c77565b3360005b8451811015611b66576000858281518110611a9257634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611abe57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611b0e5760405162461bcd60e51b815260040161079f90612cbc565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611b4b908490612daa565b9250508190555050505080611b5f90612e80565b9050611a67565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611bb6929190612bee565b60405180910390a4611bcc8187878787876122b2565b505050505050565b603d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611c9a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161079f565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006040518060a00160405280866001600160a01b03168152602001858152602001846001600160a01b03168152602001600081526020018342611d4b9190612daa565b9052600380546000908152600860209081526040808320855181546001600160a01b03199081166001600160a01b0392831617835593870151600180840191909155928701516002830180549095169116179092556060850151828501556080909401516004909101558154611dc2908490612daa565b909155505060035495945050505050565b6127108110611e245760405162461bcd60e51b815260206004820152601c60248201527f74617852617465206d757374206265203c207468616e20313030303000000000604482015260640161079f565b606f55565b600a54610100900460ff16611e505760405162461bcd60e51b815260040161079f90612d3b565b611e5861241d565b610e13612444565b8051610e4f906002906020840190612597565b6127108110611ecf5760405162461bcd60e51b815260206004820152602260248201527f63726561746f7253686172655f206d757374206265203c207468616e20313030604482015261030360f41b606482015260840161079f565b607355565b6001600160a01b038216611ee757600080fd5b60008111611ef457600080fd5b600580546001600160a01b0319166001600160a01b039390931692909217909155600655565b6001600160a01b038416611f405760405162461bcd60e51b815260040161079f90612c77565b33611f59818787611f5088612474565b610b3088612474565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611f9a5760405162461bcd60e51b815260040161079f90612cbc565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611fd7908490612daa565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46114568288888888886124cd565b6001600160a01b0384166120975760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161079f565b336120a881600087611f5088612474565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906120d8908490612daa565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b30816000878787876124cd565b6001600160a01b03831661219a5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b606482015260840161079f565b336121ca818560006121ab87612474565b6121b487612474565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156122475760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161079f565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b15611bcc5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122f69089908990889088908890600401612b38565b602060405180830381600087803b15801561231057600080fd5b505af1925050508015612340575060408051601f3d908101601f1916820190925261233d918101906129ee565b60015b6123ed5761234c612ec7565b806308c379a014156123865750612361612edf565b8061236c5750612388565b8060405162461bcd60e51b815260040161079f9190612c1c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161079f565b6001600160e01b0319811663bc197c8160e01b146114565760405162461bcd60e51b815260040161079f90612c2f565b600a54610100900460ff16610e135760405162461bcd60e51b815260040161079f90612d3b565b600a54610100900460ff1661246b5760405162461bcd60e51b815260040161079f90612d3b565b610e1333611bd4565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124bc57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611bcc5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906125119089908990889088908890600401612b96565b602060405180830381600087803b15801561252b57600080fd5b505af192505050801561255b575060408051601f3d908101601f19168201909252612558918101906129ee565b60015b6125675761234c612ec7565b6001600160e01b0319811663f23a6e6160e01b146114565760405162461bcd60e51b815260040161079f90612c2f565b8280546125a390612e18565b90600052602060002090601f0160209004810192826125c5576000855561260b565b82601f106125de57805160ff191683800117855561260b565b8280016001018555821561260b579182015b8281111561260b5782518255916020019190600101906125f0565b5061261792915061261b565b5090565b5b80821115612617576000815560010161261c565b600067ffffffffffffffff83111561264a5761264a612eb1565b604051612661601f8501601f191660200182612e53565b80915083815284848401111561267657600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261269e578081fd5b813560206126ab82612d86565b6040516126b88282612e53565b8381528281019150858301600585901b870184018810156126d7578586fd5b855b858110156126f5578135845292840192908401906001016126d9565b5090979650505050505050565b600082601f830112612712578081fd5b61272183833560208501612630565b9392505050565b600060208284031215612739578081fd5b813561272181612f69565b600060208284031215612755578081fd5b815161272181612f69565b60008060408385031215612772578081fd5b823561277d81612f69565b9150602083013561278d81612f69565b809150509250929050565b600080600080600060a086880312156127af578081fd5b85356127ba81612f69565b945060208601356127ca81612f69565b9350604086013567ffffffffffffffff808211156127e6578283fd5b6127f289838a0161268e565b94506060880135915080821115612807578283fd5b61281389838a0161268e565b93506080880135915080821115612828578283fd5b5061283588828901612702565b9150509295509295909350565b600080600080600060a08688031215612859578081fd5b853561286481612f69565b9450602086013561287481612f69565b93506040860135925060608601359150608086013567ffffffffffffffff81111561289d578182fd5b61283588828901612702565b600080604083850312156128bb578182fd5b82356128c681612f69565b91506020830135801515811461278d578182fd5b600080604083850312156128ec578182fd5b82356128f781612f69565b946020939093013593505050565b60008060408385031215612917578182fd5b823567ffffffffffffffff8082111561292e578384fd5b818501915085601f830112612941578384fd5b8135602061294e82612d86565b60405161295b8282612e53565b8381528281019150858301600585901b870184018b101561297a578889fd5b8896505b848710156129a557803561299181612f69565b83526001969096019591830191830161297e565b50965050860135925050808211156129bb578283fd5b506129c88582860161268e565b9150509250929050565b6000602082840312156129e3578081fd5b813561272181612f7e565b6000602082840312156129ff578081fd5b815161272181612f7e565b60008060008060008060c08789031215612a22578384fd5b863567ffffffffffffffff811115612a38578485fd5b8701601f81018913612a48578485fd5b612a5789823560208401612630565b9650506020870135612a6881612f69565b945060408701359350606087013592506080870135612a8681612f69565b8092505060a087013590509295509295509295565b600060208284031215612aac578081fd5b5035919050565b6000815180845260208085019450808401835b83811015612ae257815187529582019590820190600101612ac6565b509495945050505050565b60008151808452815b81811015612b1257602081850181015186830182015201612af6565b81811115612b235782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612b6490830186612ab3565b8281036060840152612b768186612ab3565b90508281036080840152612b8a8185612aed565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612bd090830184612aed565b979650505050505050565b6020815260006127216020830184612ab3565b604081526000612c016040830185612ab3565b8281036020840152612c138185612ab3565b95945050505050565b6020815260006127216020830184612aed565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600067ffffffffffffffff821115612da057612da0612eb1565b5060051b60200190565b60008219821115612dbd57612dbd612e9b565b500190565b600082612ddd57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612dfc57612dfc612e9b565b500290565b600082821015612e1357612e13612e9b565b500390565b600181811c90821680612e2c57607f821691505b60208210811415612e4d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715612e7957612e79612eb1565b6040525050565b6000600019821415612e9457612e94612e9b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612edc57600481823e5160e01c5b90565b600060443d1015612eed5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612f1d57505050505090565b8285019150815181811115612f355750505050505090565b843d8701016020828501011115612f4f5750505050505090565b612f5e60208286010187612e53565b509095945050505050565b6001600160a01b038116811461133157600080fd5b6001600160e01b03198116811461133157600080fdfea2646970667358221220507e86b9aab8c237dba6ff790ac960f7bcd3e6042e872f9bafc570f0540d354e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addExtension(address,uint256)": {
        "params": {
          "nftToAttachAddress": "address of the NFT to attach",
          "nftToAttachId": "ID of the NFT to attach"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "stateVariables": {
      "_extensionRealmLands": {
        "details": "extension ID => realmLands address"
      },
      "_extensionToAddProposal": {
        "details": "extension ID => add proposal ID"
      },
      "_proposalToExtension": {
        "details": "remove extension proposal ID => extension ID"
      },
      "_proposalTypes": {
        "details": "proposal id => proposal type"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addExtension(address,uint256)": {
        "notice": "Submit proposal to add an extension"
      },
      "removeExtension(uint256)": {
        "notice": "Submit proposal to remove an extension"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1641,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1647,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1649,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 6875,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_votingProposalCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6877,
        "contract": "contracts/Realm.sol:Realm",
        "label": "votingPower",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6879,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_creatorAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6881,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_creatorShare",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6885,
        "contract": "contracts/Realm.sol:Realm",
        "label": "votingPowerByAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6901,
        "contract": "contracts/Realm.sol:Realm",
        "label": "proposals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Proposal)6896_storage)"
      },
      {
        "astId": 6907,
        "contract": "contracts/Realm.sol:Realm",
        "label": "hasVotedForProposal",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 132,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_initialized",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 135,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_initializing",
        "offset": 1,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 487,
        "contract": "contracts/Realm.sol:Realm",
        "label": "__gap",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_owner",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 124,
        "contract": "contracts/Realm.sol:Realm",
        "label": "__gap",
        "offset": 0,
        "slot": "62",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6061,
        "contract": "contracts/Realm.sol:Realm",
        "label": "taxRate",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 6063,
        "contract": "contracts/Realm.sol:Realm",
        "label": "protocolFee",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 6065,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_tokenId",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 6067,
        "contract": "contracts/Realm.sol:Realm",
        "label": "votingTime",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 6069,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_creatorShare",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 6071,
        "contract": "contracts/Realm.sol:Realm",
        "label": "depositFee",
        "offset": 0,
        "slot": "116",
        "type": "t_uint256"
      },
      {
        "astId": 6077,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_proposalTypes",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_uint256,t_enum(ProposalTypes)6031)"
      },
      {
        "astId": 6082,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_extensionToAddProposal",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6087,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_proposalToExtension",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6092,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_extensionRealmLands",
        "offset": 0,
        "slot": "120",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6098,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_deposits",
        "offset": 0,
        "slot": "121",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6100,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_taxes",
        "offset": 0,
        "slot": "122",
        "type": "t_uint256"
      },
      {
        "astId": 6102,
        "contract": "contracts/Realm.sol:Realm",
        "label": "_protocolFees",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ProposalTypes)6031": {
        "encoding": "inplace",
        "label": "enum Realm.ProposalTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(ProposalTypes)6031)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Realm.ProposalTypes)",
        "numberOfBytes": "32",
        "value": "t_enum(ProposalTypes)6031"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)6896_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)6896_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)6896_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 6887,
            "contract": "contracts/Realm.sol:Realm",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6889,
            "contract": "contracts/Realm.sol:Realm",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6891,
            "contract": "contracts/Realm.sol:Realm",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6893,
            "contract": "contracts/Realm.sol:Realm",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6895,
            "contract": "contracts/Realm.sol:Realm",
            "label": "votingEnd",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}