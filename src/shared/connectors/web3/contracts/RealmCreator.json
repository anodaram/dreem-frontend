{
  "address": "0xDd7Bb3D33bc43a46FDb040Bc88C28EaF80FEEAa8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "taxRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creatorShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "upgrader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributionManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "realmAddress",
          "type": "address"
        }
      ],
      "name": "RealmCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "taxRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creatorShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingConsensus",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftToAttachAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftToAttachId",
          "type": "uint256"
        }
      ],
      "name": "createRealm",
      "outputs": [
        {
          "internalType": "address",
          "name": "realmAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributionManager_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_logic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    }
  ],
  "transactionHash": "0x739806079fa5269cfcc7dbd51da28034f50610776c22e5f210b2281e2a480c00",
  "receipt": {
    "to": null,
    "from": "0x283DdEa5589aba63221653D9ED02aaa7D60a389B",
    "contractAddress": "0xDd7Bb3D33bc43a46FDb040Bc88C28EaF80FEEAa8",
    "transactionIndex": 1,
    "gasUsed": "247692",
    "logsBloom": "0x
    "blockHash": "0x2d9f48eb20906ea2ce4c7b5f05600ca17720967bb460d708b1bf60e832f40825",
    "transactionHash": "0x739806079fa5269cfcc7dbd51da28034f50610776c22e5f210b2281e2a480c00",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24621441,
        "transactionHash": "0x739806079fa5269cfcc7dbd51da28034f50610776c22e5f210b2281e2a480c00",
        "address": "0xDd7Bb3D33bc43a46FDb040Bc88C28EaF80FEEAa8",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x0000000000000000000000006df070faca369523eaf1c033c6d650829df8bbe9"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x2d9f48eb20906ea2ce4c7b5f05600ca17720967bb460d708b1bf60e832f40825"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 24621441,
        "transactionHash": "0x739806079fa5269cfcc7dbd51da28034f50610776c22e5f210b2281e2a480c00",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000001c28c933ab3a00000000000000000000000000000000000000000000000000924b504efc0e04a000000000000000000000000000000000000000000000640b517e28088e75b6e0000000000000000000000000000000000000000000000000922f2785c862caa000000000000000000000000000000000000000000000640b519a50d1c220f0e",
        "logIndex": 22,
        "blockHash": "0x2d9f48eb20906ea2ce4c7b5f05600ca17720967bb460d708b1bf60e832f40825"
      }
    ],
    "blockNumber": 24621441,
    "cumulativeGasUsed": "739522",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6df070Faca369523Eaf1C033C6D650829Df8BBE9",
    "0x283DdEa5589aba63221653D9ED02aaa7D60a389B",
    "0x"
  ],
  "solcInputHash": "5de1a950b8180589fbd3fbb8e882e098",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"this proxy is just a wrapper to make ERC1967Proxy compatible with hardhat-deploy\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxies/UUPSProxy.sol\":\"UUPSProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f4c3eed093dfb0e4e20c1c102d2f2c6894a972f454adb308511a0afb37e6f79\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xab2556b154ceb1a11e456f2827ca8f6f65242b1b2fcc00268ab6d38fc6e64bbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/proxies/UUPSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev this proxy is just a wrapper to make ERC1967Proxy compatible with hardhat-deploy\\n */\\ncontract UUPSProxy is ERC1967Proxy {\\n    constructor(\\n        address _logic,\\n        address,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {} // solhint-disable-line\\n}\\n\",\"keccak256\":\"0x2e0763ca51dfdb56b450a28c8e4c340662bf628206eb188023fffd1e76cbff10\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040516107a23803806107a283398101604081905261002291610324565b828161004f60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd61043f565b60008051602061075b8339815191521461007957634e487b7160e01b600052600160045260246000fd5b6100858282600061008f565b50505050506104a4565b610098836100c5565b6000825111806100a55750805b156100c0576100be838361010560201b6100291760201c565b505b505050565b6100ce81610131565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061012a838360405180606001604052806027815260200161077b602791396101f1565b9392505050565b610144816102c660201b6100551760201c565b6101ab5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101d060008051602061075b83398151915260001b6102cc60201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060833b6102505760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016101a2565b600080856001600160a01b03168560405161026b91906103f0565b600060405180830381855af49150503d80600081146102a6576040519150601f19603f3d011682016040523d82523d6000602084013e6102ab565b606091505b5090925090506102bc8282866102cf565b9695505050505050565b3b151590565b90565b606083156102de57508161012a565b8251156102ee5782518084602001fd5b8160405162461bcd60e51b81526004016101a2919061040c565b80516001600160a01b038116811461031f57600080fd5b919050565b600080600060608486031215610338578283fd5b61034184610308565b925061034f60208501610308565b60408501519092506001600160401b038082111561036b578283fd5b818601915086601f83011261037e578283fd5b8151818111156103905761039061048e565b604051601f8201601f19908116603f011681019083821181831017156103b8576103b861048e565b816040528281528960208487010111156103d0578586fd5b6103e1836020830160208801610462565b80955050505050509250925092565b60008251610402818460208701610462565b9190910192915050565b602081526000825180602084015261042b816040850160208701610462565b601f01601f19169190910160400192915050565b60008282101561045d57634e487b7160e01b81526011600452602481fd5b500390565b60005b8381101561047d578181015183820152602001610465565b838111156100be5750506000910152565b634e487b7160e01b600052604160045260246000fd5b6102a8806104b36000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b610096565b565b606061004e838360405180606001604052806027815260200161024c602791396100ba565b9392505050565b3b151590565b90565b60006100917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100b5573d6000f35b3d6000fd5b6060833b61011e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161013991906101cc565b600060405180830381855af49150503d8060008114610174576040519150601f19603f3d011682016040523d82523d6000602084013e610179565b606091505b5091509150610189828286610193565b9695505050505050565b606083156101a257508161004e565b8251156101b25782518084602001fd5b8160405162461bcd60e51b815260040161011591906101e8565b600082516101de81846020870161021b565b9190910192915050565b602081526000825180602084015261020781604085016020870161021b565b601f01601f19169190910160400192915050565b60005b8381101561023657818101518382015260200161021e565b83811115610245576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e12a52149406559f41a0f1adb861983c9a112b113e408e78e52ffd5088ade99364736f6c63430008040033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
  "deployedBytecode": "0x60806040523661001357610011610017565b005b6100115b61002761002261005e565b610096565b565b606061004e838360405180606001604052806027815260200161024c602791396100ba565b9392505050565b3b151590565b90565b60006100917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b3660008037600080366000845af43d6000803e8080156100b5573d6000f35b3d6000fd5b6060833b61011e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b03168560405161013991906101cc565b600060405180830381855af49150503d8060008114610174576040519150601f19603f3d011682016040523d82523d6000602084013e610179565b606091505b5091509150610189828286610193565b9695505050505050565b606083156101a257508161004e565b8251156101b25782518084602001fd5b8160405162461bcd60e51b815260040161011591906101e8565b600082516101de81846020870161021b565b9190910192915050565b602081526000825180602084015261020781604085016020870161021b565b601f01601f19169190910160400192915050565b60005b8381101561023657818101518382015260200161021e565b83811115610245576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e12a52149406559f41a0f1adb861983c9a112b113e408e78e52ffd5088ade99364736f6c63430008040033",
  "history": [
    {
      "address": "0x70ee4a16b077620B6c5fB0208986B51143407b58",
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "taxRate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "creatorShare",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "realmAddress",
              "type": "address"
            }
          ],
          "name": "RealmCreated",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "taxRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creatorShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingConsensus",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftToAttachAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftToAttachId",
              "type": "uint256"
            }
          ],
          "name": "createRealm",
          "outputs": [
            {
              "internalType": "address",
              "name": "realmAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "transactionHash": "0x8d103caf8cba1c00d7a2955d5300bd6639bafef35f3beeef69f24ee3ba3dbbb8",
      "receipt": {
        "to": null,
        "from": "0x283DdEa5589aba63221653D9ED02aaa7D60a389B",
        "contractAddress": "0x70ee4a16b077620B6c5fB0208986B51143407b58",
        "transactionIndex": 7,
        "gasUsed": "3499135",
        "logsBloom": "0x
        "blockHash": "0x35c4a97527d6567a421605e84ab7c7a43a6360aec67993a76d7f2922720d0001",
        "transactionHash": "0x8d103caf8cba1c00d7a2955d5300bd6639bafef35f3beeef69f24ee3ba3dbbb8",
        "logs": [
          {
            "transactionIndex": 7,
            "blockNumber": 24619729,
            "transactionHash": "0x8d103caf8cba1c00d7a2955d5300bd6639bafef35f3beeef69f24ee3ba3dbbb8",
            "address": "0x0000000000000000000000000000000000001010",
            "topics": [
              "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
              "0x0000000000000000000000000000000000000000000000000000000000001010",
              "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b",
              "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
            ],
            "data": "0x0000000000000000000000000000000000000000000000000018dce3b3b94808000000000000000000000000000000000000000000000000099cb7a677c1544a00000000000000000000000000000000000000000000058a7c41ee466ff184940000000000000000000000000000000000000000000000000983dac2c4080c4200000000000000000000000000000000000000000000058a7c5acb2a23aacc9c",
            "logIndex": 32,
            "blockHash": "0x35c4a97527d6567a421605e84ab7c7a43a6360aec67993a76d7f2922720d0001"
          }
        ],
        "blockNumber": 24619729,
        "cumulativeGasUsed": "4848411",
        "status": 1,
        "byzantium": true
      },
      "args": [],
      "solcInputHash": "bebe639f88b96139f1c98a1ba8cb54a8",
      "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"realmAddress\",\"type\":\"address\"}],\"name\":\"RealmCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"taxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingConsensus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftToAttachAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftToAttachId\",\"type\":\"uint256\"}],\"name\":\"createRealm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"realmAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RealmCreator.sol\":\"RealmCreator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Realm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"./Voting.sol\\\";\\r\\nimport \\\"./RealmLands.sol\\\";\\r\\n\\r\\ncontract Realm is ERC1155, Voting, OwnableUpgradeable, UUPSUpgradeable {\\r\\n\\r\\n    enum ProposalTypes{ADD, REMOVE}\\r\\n\\r\\n    event ProposalSubmitted(\\r\\n        uint256 proposalId,\\r\\n        address nftAddress,\\r\\n        uint256 nftId,\\r\\n        address owner,\\r\\n        string proposalType\\r\\n    );\\r\\n\\r\\n    event ProposalAccepted(\\r\\n        uint256 proposalId,\\r\\n        address nftAddress,\\r\\n        uint256 nftId,\\r\\n        uint256 extensionId\\r\\n    );\\r\\n\\r\\n    event Voted(\\r\\n        uint256 proposalId,\\r\\n        address voter\\r\\n    );\\r\\n\\r\\n    uint256 public taxRate;\\r\\n    uint256 public protocolFee;\\r\\n\\r\\n    uint256 private _tokenId;\\r\\n    uint256 public votingTime;\\r\\n    uint256 private _creatorShare;\\r\\n    uint256 public depositFee;\\r\\n\\r\\n\\r\\n    /// @dev proposal id => proposal type\\r\\n    mapping (uint256 => ProposalTypes) private _proposalTypes;\\r\\n\\r\\n    /// @dev extension ID => add proposal ID\\r\\n    mapping (uint256 => uint256) private _extensionToAddProposal;\\r\\n\\r\\n    /// @dev remove extension proposal ID => extension ID\\r\\n    mapping (uint256 => uint256) private _proposalToExtension;\\r\\n\\r\\n    /// @dev extension ID => realmLands address\\r\\n    mapping (uint256 => address) private _extensionRealmLands;\\r\\n\\r\\n    mapping (address => mapping(uint256 => uint256)) private _deposits;\\r\\n\\r\\n    uint256 private _taxes;\\r\\n\\r\\n    address private _feeCollector;\\r\\n\\r\\n    constructor() ERC1155(\\\"\\\") {}\\r\\n\\r\\n    function initialize(\\r\\n        string memory uri,\\r\\n        address caller,\\r\\n        uint256 taxRate_,\\r\\n        uint256 creatorShare,\\r\\n        uint256 votingConsensus,\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId\\r\\n    ) external initializer onlyOwner {\\r\\n        __Ownable_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _setURI(uri);\\r\\n        _setTaxRate(taxRate_);\\r\\n        _setCreatorShare(creatorShare);\\r\\n        _attachNFT(nftToAttachAddress, nftToAttachId, caller);\\r\\n        _setCreatorShare(caller, creatorShare);\\r\\n        _setVotingConsensus(votingConsensus);\\r\\n        _addVotingPower(caller);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Submit proposal to add an extension\\r\\n     * @param nftToAttachAddress address of the NFT to attach\\r\\n     * @param nftToAttachId ID of the NFT to attach\\r\\n     */\\r\\n    function addExtension(\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId\\r\\n    ) public payable {\\r\\n        // Make sure that caller is owner of ERC721\\r\\n        address tokenOwner = IERC721Metadata(nftToAttachAddress).ownerOf(nftToAttachId);\\r\\n        address approvedFor = IERC721Metadata(nftToAttachAddress).getApproved(nftToAttachId);\\r\\n\\r\\n        require(tokenOwner == msg.sender, \\\"You are not the owner!\\\");\\r\\n        require(approvedFor == address(this), \\\"Realm should be approved!\\\");\\r\\n\\r\\n        // Queue proposal for voting\\r\\n        uint256 proposalId = _queueForVoting(\\r\\n            nftToAttachAddress,\\r\\n            nftToAttachId,\\r\\n            msg.sender,\\r\\n            votingTime\\r\\n        );\\r\\n\\r\\n        // save proposal type\\r\\n        _proposalTypes[proposalId] = ProposalTypes.ADD;\\r\\n\\r\\n        if (depositFee > 0) {\\r\\n            require(msg.value == depositFee, \\\"msg.value should equal depositFee!\\\");\\r\\n\\r\\n            uint256 depositFeeValue = msg.value;\\r\\n\\r\\n            if (taxRate > 0) {\\r\\n                uint256 tax = msg.value * taxRate / 10000;\\r\\n                depositFeeValue -= tax;\\r\\n                _taxes += tax;\\r\\n            }\\r\\n\\r\\n            if (protocolFee > 0) {\\r\\n                uint256 protocolFeeValue = msg.value * protocolFee / 10000;\\r\\n                depositFeeValue -= protocolFeeValue;\\r\\n                payable(_feeCollector).transfer(protocolFeeValue);\\r\\n            }\\r\\n\\r\\n            _deposits[msg.sender][proposalId] += depositFeeValue;\\r\\n\\r\\n        }\\r\\n\\r\\n        emit ProposalSubmitted(\\r\\n            proposalId,\\r\\n            nftToAttachAddress,\\r\\n            nftToAttachId,\\r\\n            msg.sender,\\r\\n            \\\"ADD\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Submit proposal to remove an extension\\r\\n    function removeExtension(\\r\\n        uint256 extensionTokenId\\r\\n    ) public {\\r\\n        uint256 tokenBalance = balanceOf(msg.sender, extensionTokenId);\\r\\n        require(tokenBalance > 0, \\\"You are not the owner of the extension\\\");\\r\\n\\r\\n        // Get add proposal ID to get token data\\r\\n        uint256 addProposalId = _extensionToAddProposal[extensionTokenId];\\r\\n        // Get token data\\r\\n        (address tokenAddress, uint256 tokenId, address owner) = _getTokenData(addProposalId);\\r\\n\\r\\n        // Queue for voting\\r\\n        uint256 proposalId = _queueForVoting(\\r\\n            tokenAddress,\\r\\n            tokenId,\\r\\n            owner,\\r\\n            votingTime\\r\\n        );\\r\\n\\r\\n        // Save data in mappings\\r\\n        _proposalTypes[proposalId] = ProposalTypes.REMOVE;\\r\\n        _proposalToExtension[proposalId] = extensionTokenId;\\r\\n\\r\\n        emit ProposalSubmitted(\\r\\n            proposalId,\\r\\n            tokenAddress,\\r\\n            tokenId,\\r\\n            msg.sender,\\r\\n            \\\"REMOVE\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function voteForProposal(uint256 proposalId) external {\\r\\n        bool votingApproved = _voteForProposal(proposalId);\\r\\n\\r\\n        if (votingApproved) {\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.ADD) {\\r\\n\\r\\n                (address tokenAddress, uint256 tokenId, address proposer) = _getTokenData(proposalId);\\r\\n\\r\\n                uint256 newTokenId = _attachNFT(tokenAddress, tokenId, proposer);\\r\\n\\r\\n                _extensionToAddProposal[newTokenId] = proposalId;\\r\\n\\r\\n                _addVotingPower(proposer);\\r\\n\\r\\n\\r\\n                uint256 depositValue = _deposits[msg.sender][proposalId];\\r\\n                if (depositValue > 0) {\\r\\n                    payable(msg.sender).transfer(depositValue);\\r\\n                    _deposits[msg.sender][proposalId] = 0;\\r\\n                }\\r\\n\\r\\n                emit ProposalAccepted(\\r\\n                    proposalId,\\r\\n                    tokenAddress,\\r\\n                    tokenId,\\r\\n                    newTokenId\\r\\n                );\\r\\n            }\\r\\n\\r\\n            if (_proposalTypes[proposalId] == ProposalTypes.REMOVE) {\\r\\n                uint256 extensionId = _proposalToExtension[proposalId];\\r\\n\\r\\n                uint256 addProposalId = _extensionToAddProposal[extensionId];\\r\\n\\r\\n                (address tokenAddress, uint256 tokenId, address owner) = _getTokenData(addProposalId);\\r\\n\\r\\n                _unattachNFT(tokenAddress, tokenId, owner, extensionId);\\r\\n\\r\\n                _removeVotingPower(owner);\\r\\n\\r\\n                emit ProposalAccepted(\\r\\n                    proposalId,\\r\\n                    tokenAddress,\\r\\n                    tokenId,\\r\\n                    extensionId\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Voted(proposalId, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setVotingTime(uint256 votingTime_) external onlyOwner {\\r\\n        votingTime = votingTime_;\\r\\n    }\\r\\n   \\r\\n    function _createRealmLands(uint256 extensionId ) internal {\\r\\n        address realmLands = address(new RealmLands());\\r\\n        _extensionRealmLands[extensionId] = realmLands;\\r\\n    }\\r\\n\\r\\n    function _attachNFT(\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        address from\\r\\n    ) internal returns(uint256) {\\r\\n\\r\\n        IERC721Metadata(collection).transferFrom(\\r\\n            from,\\r\\n            address(this),\\r\\n            tokenId\\r\\n        );\\r\\n\\r\\n        _tokenId += 1;\\r\\n\\r\\n        _mint(from, _tokenId, 1, \\\"\\\");\\r\\n\\r\\n        return _tokenId;\\r\\n    }\\r\\n\\r\\n    function _unattachNFT(\\r\\n        address collection,\\r\\n        uint256 tokenId,\\r\\n        address to,\\r\\n        uint256 extensionId\\r\\n    ) internal {\\r\\n        IERC721Metadata(collection).transferFrom(\\r\\n            address(this),\\r\\n            to,\\r\\n            tokenId\\r\\n        );\\r\\n\\r\\n        _burn(to, extensionId, 1);\\r\\n\\r\\n    }\\r\\n\\r\\n    function setTaxRate(uint256 taxRate_) external onlyOwner {\\r\\n        _setTaxRate(taxRate_);\\r\\n    }\\r\\n\\r\\n    function _setTaxRate(uint256 taxRate_) internal {\\r\\n        require(taxRate_ >= 0, \\\"taxRate must be >= than 0\\\");\\r\\n        require(taxRate_ < 10000, \\\"taxRate must be < than 10000\\\");\\r\\n        taxRate = taxRate_;\\r\\n    }\\r\\n\\r\\n    function _setCreatorShare(uint256 creatorShare_) internal {\\r\\n        require(creatorShare_ >= 0, \\\"creatorShare_ must be >= than 0\\\");\\r\\n        require(creatorShare_ < 10000, \\\"creatorShare_ must be < than 10000\\\");\\r\\n        _creatorShare = creatorShare_;\\r\\n    }\\r\\n\\r\\n    function getRealmLandsAddress(uint256 extensionId) public view returns (address) {\\r\\n        return _extensionRealmLands[extensionId];\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view override (Context, ContextUpgradeable) returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view override (Context, ContextUpgradeable) returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function setDepositFee(uint256 depositFee_) public onlyOwner {\\r\\n        depositFee = depositFee_;\\r\\n    }\\r\\n\\r\\n    function setFeeCollector(address feeCollector_) public onlyOwner {\\r\\n        _feeCollector = feeCollector_;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function withdrawDepositFee(uint256 proposalId) public {\\r\\n        uint256 votingEnd = getProposalVotingEnd(proposalId);\\r\\n        address votingOwner = getProposalOwner(proposalId);\\r\\n        require(votingOwner == msg.sender, \\\"You are not the owner of the proposal!\\\");\\r\\n        require(votingEnd <= block.timestamp, \\\"Voting is not finished!\\\");\\r\\n\\r\\n        uint256 depositValue = _deposits[msg.sender][proposalId];\\r\\n        if (depositValue > 0) {\\r\\n            payable(msg.sender).transfer(depositValue);\\r\\n            _deposits[msg.sender][proposalId] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\r\\n\\r\\n}\",\"keccak256\":\"0xf19c710f172d1c1c71ba28f944f45235ad36dcc932c300ecdffb34cbb6ecf87c\",\"license\":\"MIT\"},\"contracts/RealmCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./Realm.sol\\\";\\r\\n\\r\\ncontract RealmCreator {\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    event RealmCreated(\\r\\n        string uri,\\r\\n        uint256 taxRate,\\r\\n        uint256 creatorShare,\\r\\n        address owner, \\r\\n        address nftAddress,\\r\\n        uint256 nftId,\\r\\n        address realmAddress\\r\\n    );\\r\\n\\r\\n    function createRealm(\\r\\n        string memory uri,\\r\\n        uint256 taxRate,\\r\\n        uint256 creatorShare,\\r\\n        uint256 votingConsensus,\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId\\r\\n    ) external returns (address realmAddress) {\\r\\n        \\r\\n        realmAddress = address(new Realm());\\r\\n\\r\\n        Realm(realmAddress).initialize(\\r\\n            uri,\\r\\n            msg.sender,\\r\\n            taxRate,\\r\\n            creatorShare,\\r\\n            votingConsensus,\\r\\n            nftToAttachAddress,\\r\\n            nftToAttachId\\r\\n        );\\r\\n\\r\\n        Realm(realmAddress).transferOwnership(msg.sender);\\r\\n\\r\\n        emit RealmCreated(uri, taxRate, creatorShare, msg.sender, nftToAttachAddress, nftToAttachId, realmAddress);\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x914b65da838e74a47f25ffd2733e0cb6c0317dbc83bf8251a0c48e80cc4f3105\",\"license\":\"MIT\"},\"contracts/RealmLands.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract RealmLands is ERC721, Ownable {\\r\\n    constructor() ERC721(\\\"\\\", \\\"\\\") {} \\r\\n\\r\\n    function mint(address to, uint256 tokenId) public onlyOwner {\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf051919d80e6e7a67ed1ac6a13acc0be00972dc73e61e9cbf92011ac6148bc1e\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nabstract contract Voting  {\\r\\n\\r\\n    uint256 private _votingProposalCounter;\\r\\n\\r\\n    uint256 public votingPower;\\r\\n\\r\\n    address private _creatorAddress;\\r\\n    uint256 private _creatorShare;\\r\\n\\r\\n    uint256 private _votingConsensus;\\r\\n\\r\\n    mapping (address => uint256) public votingPowerByAddress;\\r\\n\\r\\n    struct Proposal {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenId;\\r\\n        address owner;\\r\\n        uint256 votes;\\r\\n        uint256 votingEnd;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    mapping(address => mapping(uint256 => bool)) hasVotedForProposal;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function _addVotingPower(address owner) internal {\\r\\n        votingPower += 10000;\\r\\n\\r\\n        uint256 votingPowerCreator = 10000 * _creatorShare / 10000;\\r\\n        uint256 votingPowerOwner = 10000 - votingPowerCreator;\\r\\n\\r\\n        votingPowerByAddress[_creatorAddress] += votingPowerCreator;\\r\\n        votingPowerByAddress[owner] += votingPowerOwner;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _removeVotingPower(address owner) internal {\\r\\n        votingPower -= 10000;\\r\\n        uint256 votingPowerCreator = 10000 * _creatorShare / 10000;\\r\\n        uint256 votingPowerOwner = 10000 - votingPowerCreator;\\r\\n\\r\\n        votingPowerByAddress[_creatorAddress] += votingPowerCreator;\\r\\n        votingPowerByAddress[owner] += votingPowerOwner;\\r\\n    }\\r\\n\\r\\n    function _queueForVoting(\\r\\n        address nftToAttachAddress,\\r\\n        uint256 nftToAttachId,\\r\\n        address caller,\\r\\n        uint256 votingTime_\\r\\n    ) internal returns (uint256) {\\r\\n        proposals[_votingProposalCounter] = Proposal(\\r\\n            nftToAttachAddress,\\r\\n            nftToAttachId,\\r\\n            caller,\\r\\n            0,\\r\\n            block.timestamp + votingTime_\\r\\n        );\\r\\n\\r\\n        _votingProposalCounter += 1;\\r\\n\\r\\n        return _votingProposalCounter;\\r\\n    }\\r\\n\\r\\n    function _voteForProposal(uint256 proposalId) internal returns (bool) {\\r\\n        require(\\r\\n            proposals[proposalId].tokenAddress != address(0), \\r\\n            \\\"Non existent proposal\\\"\\r\\n        );\\r\\n        require(\\r\\n            hasVotedForProposal[msg.sender][proposalId] == false,\\r\\n            \\\"Can't vote for same proposal twice!\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            proposals[proposalId].votingEnd > block.timestamp,\\r\\n            \\\"Proposal has expired\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            votingPowerByAddress[msg.sender] > 0,\\r\\n            \\\"You do not have voting power\\\"\\r\\n        );\\r\\n\\r\\n        proposals[proposalId].votes += votingPowerByAddress[msg.sender];\\r\\n\\r\\n        hasVotedForProposal[msg.sender][proposalId] = true;\\r\\n\\r\\n        if (proposals[proposalId].votes > votingPower * _votingConsensus / 10000) {\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getTokenData(uint256 proposalId) internal view returns (address tokenAddress, uint256 tokenId, address owner) {\\r\\n        tokenAddress = proposals[proposalId].tokenAddress;\\r\\n        tokenId = proposals[proposalId].tokenId;\\r\\n        owner = proposals[proposalId].owner;\\r\\n    }\\r\\n\\r\\n    function _setCreatorShare(\\r\\n        address creatorAddress, \\r\\n        uint256 creatorShare\\r\\n    ) internal {\\r\\n        require(creatorAddress != address(0), \\\"creatorAddress can't be address zero\\\");\\r\\n        require(creatorShare > 0, \\\"creatorShare must be > than 0\\\");\\r\\n        require(creatorShare < 10000, \\\"creatorShare must be =< 10000\\\");\\r\\n        _creatorAddress = creatorAddress;\\r\\n        _creatorShare = creatorShare;\\r\\n    }\\r\\n\\r\\n    function _setVotingConsensus(\\r\\n        uint256 votingConsensus\\r\\n    ) internal {\\r\\n        require(votingConsensus > 0, \\\"votingConsensus must be > than 0\\\");\\r\\n        require(votingConsensus <= 10000, \\\"votingConsensus must be =< 10000\\\");\\r\\n        _votingConsensus = votingConsensus;\\r\\n    }\\r\\n\\r\\n    function getProposalVotingEnd(uint256 proposalId) public view returns (uint256) {\\r\\n        return proposals[proposalId].votingEnd;\\r\\n    }\\r\\n\\r\\n    function getProposalTokenAddress(uint256 proposalId) public view returns (address) {\\r\\n        return proposals[proposalId].tokenAddress;\\r\\n    }\\r\\n\\r\\n    function getProposalTokenId(uint256 proposalId) public view returns (uint256) {\\r\\n        return proposals[proposalId].tokenId;\\r\\n    }\\r\\n\\r\\n    function getProposalOwner(uint256 proposalId) public view returns (address) {\\r\\n        return proposals[proposalId].owner;\\r\\n    }\\r\\n\\r\\n    function getProposalVotes(uint256 proposalId) public view returns (uint256) {\\r\\n        return proposals[proposalId].votes;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x91bf6809ef1f95f8eb0449fae4e04f0d1baec38bcc3acf64273ad53694aad038\",\"license\":\"MIT\"}},\"version\":1}",
      "bytecode": "0x608060405234801561001057600080fd5b50613e5c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636350fc1c14610030575b600080fd5b61004361003e3660046101c6565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b600060405161006d9061019d565b604051809103906000f080158015610089573d6000803e3d6000fd5b50604051639dd8d33560e01b81529091506001600160a01b03821690639dd8d335906100c5908a9033908b908b908b908b908b906004016102f3565b600060405180830381600087803b1580156100df57600080fd5b505af11580156100f3573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b505050507f66d4fc0fb87c297a8030f27ab603acc05cb3839e61b3c64c31c4aafd2d35f3c38787873387878760405161018b9796959493929190610343565b60405180910390a19695505050505050565b613a80806103a783390190565b80356001600160a01b03811681146101c157600080fd5b919050565b60008060008060008060c087890312156101de578182fd5b863567ffffffffffffffff808211156101f5578384fd5b818901915089601f830112610208578384fd5b81358181111561021a5761021a610390565b604051601f8201601f19908116603f0116810190838211818310171561024257610242610390565b816040528281528c602084870101111561025a578687fd5b826020860160208301378660208483010152809a505050505050602087013594506040870135935060608701359250610295608088016101aa565b915060a087013590509295509295509295565b60008151808452815b818110156102cd576020818501810151868301820152016102b1565b818111156102de5782602083870101525b50601f01601f19169290920160200192915050565b60e08152600061030660e083018a6102a8565b6001600160a01b0398891660208401526040830197909752506060810194909452608084019290925290931660a082015260c00191909152919050565b60e08152600061035660e083018a6102a8565b60208301989098525060408101959095526001600160a01b039384166060860152918316608085015260a08401521660c090910152919050565b634e487b7160e01b600052604160045260246000fdfe60a06040523060601b6080523480156200001857600080fd5b5060408051602081019091526000815262000033816200003a565b5062000136565b80516200004f90600290602084019062000053565b5050565b8280546200006190620000f9565b90600052602060002090601f016020900481019282620000855760008555620000d0565b82601f10620000a057805160ff1916838001178555620000d0565b82800160010185558215620000d0579182015b82811115620000d0578251825591602001919060010190620000b3565b50620000de929150620000e2565b5090565b5b80821115620000de5760008155600101620000e3565b600181811c908216806200010e57607f821691505b602082108114156200013057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c6139166200016a60003960008181610bf701528181610c3701528181610f920152610fd201526139166000f3fe6080604052600436106102035760003560e01c80635ab24f5911610118578063b0e21e8a116100a0578063d7c819761161006f578063d7c81976146106a7578063e985e9c5146106c7578063f242432a14610710578063f2fde38b14610730578063f4b5157b1461075057600080fd5b8063b0e21e8a1461063e578063b920ef7114610654578063b92a479e14610674578063c6d69a301461068757600080fd5b8063771a3a1d116100e7578063771a3a1d146105aa5780638da5cb5b146105c05780639dd8d335146105de578063a22cb465146105fe578063a42dce801461061e57600080fd5b80635ab24f591461053357806367a5279314610569578063715018a61461057f57806377174f851461059457600080fd5b80632bb5edec1161019b57806347c661401161016a57806347c6614014610483578063490ae210146104b35780634df161a1146104d35780634e1273f4146104f35780634f1ef2861461052057600080fd5b80632bb5edec146103e05780632eb2c2d6146104165780633659cfe61461043657806339997a021461045657600080fd5b80630e89341c116101d75780630e89341c1461031c57806317826ac41461034957806319be726d1461039a5780631cbe482d146103ca57600080fd5b8062fdd58e14610208578063013cf08b1461023b57806301ffc9a7146102ca578063045c6ce0146102fa575b600080fd5b34801561021457600080fd5b50610228610223366004613146565b610780565b6040519081526020015b60405180910390f35b34801561024757600080fd5b50610291610256366004613308565b600960205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949293909116919085565b604080516001600160a01b039687168152602081019590955292909416918301919091526060820152608081019190915260a001610232565b3480156102d657600080fd5b506102ea6102e5366004613234565b610817565b6040519015158152602001610232565b34801561030657600080fd5b5061031a610315366004613308565b610869565b005b34801561032857600080fd5b5061033c610337366004613308565b610ac1565b604051610232919061347d565b34801561035557600080fd5b50610382610364366004613308565b6000908152600960205260409020600201546001600160a01b031690565b6040516001600160a01b039091168152602001610232565b3480156103a657600080fd5b506102286103b5366004613308565b60009081526009602052604090206001015490565b3480156103d657600080fd5b5061022860d75481565b3480156103ec57600080fd5b506103826103fb366004613308565b600090815260dd60205260409020546001600160a01b031690565b34801561042257600080fd5b5061031a610431366004612fb6565b610b55565b34801561044257600080fd5b5061031a610451366004612f46565b610bec565b34801561046257600080fd5b50610228610471366004612f46565b60086020526000908152604090205481565b34801561048f57600080fd5b5061022861049e366004613308565b60009081526009602052604090206003015490565b3480156104bf57600080fd5b5061031a6104ce366004613308565b610cb5565b3480156104df57600080fd5b5061031a6104ee366004613308565b610ce4565b3480156104ff57600080fd5b5061051361050e366004613171565b610e25565b6040516102329190613445565b61031a61052e3660046130f8565b610f87565b34801561053f57600080fd5b5061038261054e366004613308565b6000908152600960205260409020546001600160a01b031690565b34801561057557600080fd5b5061022860d95481565b34801561058b57600080fd5b5061031a611041565b3480156105a057600080fd5b5061022860045481565b3480156105b657600080fd5b5061022860d45481565b3480156105cc57600080fd5b50603e546001600160a01b0316610382565b3480156105ea57600080fd5b5061031a6105f936600461326c565b611077565b34801561060a57600080fd5b5061031a6106193660046130c7565b6111b4565b34801561062a57600080fd5b5061031a610639366004612f46565b6111bf565b34801561064a57600080fd5b5061022860d55481565b34801561066057600080fd5b5061031a61066f366004613308565b61120b565b61031a610682366004613146565b611349565b34801561069357600080fd5b5061031a6106a2366004613308565b6116d9565b3480156106b357600080fd5b5061031a6106c2366004613308565b61170c565b3480156106d357600080fd5b506102ea6106e2366004612f7e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561071c57600080fd5b5061031a61072b366004613060565b61173b565b34801561073c57600080fd5b5061031a61074b366004612f46565b6117c2565b34801561075c57600080fd5b5061022861076b366004613308565b60009081526009602052604090206004015490565b60006001600160a01b0383166107f15760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061084857506001600160e01b031982166303a24d0760e21b145b8061086357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006108748261185a565b90508015610a8557600082815260da602052604081205460ff1660018111156108ad57634e487b7160e01b600052602160045260246000fd5b14156109b15760008060006108c185611a80565b92509250925060006108d4848484611aac565b600081815260db6020526040902087905590506108f082611b5c565b33600090815260de60209081526040808320898452909152902054801561095b57604051339082156108fc029083906000818181858888f1935050505015801561093e573d6000803e3d6000fd5b5033600090815260de602090815260408083208a84529091528120555b604080518881526001600160a01b0387166020820152908101859052606081018390527fb180d23f07a381509523d52a37e7da63c2b098fbccf7e84dea6b6648e062e15c9060800160405180910390a150505050505b6001600083815260da602052604090205460ff1660018111156109e457634e487b7160e01b600052602160045260246000fd5b1415610a8557600082815260dc602090815260408083205480845260db90925282205490918080610a1484611a80565b925092509250610a2683838388611c09565b610a2f81611c7d565b604080518881526001600160a01b0385166020820152908101839052606081018690527fb180d23f07a381509523d52a37e7da63c2b098fbccf7e84dea6b6648e062e15c9060800160405180910390a150505050505b604080518381523360208201527f030b0f8dcd86a031eddb071f91882edeac8173663ba775713b677b42b51be44b910160405180910390a15050565b606060028054610ad09061373d565b80601f0160208091040260200160405190810160405280929190818152602001828054610afc9061373d565b8015610b495780601f10610b1e57610100808354040283529160200191610b49565b820191906000526020600020905b815481529060010190602001808311610b2c57829003601f168201915b50505050509050919050565b6001600160a01b038516331480610b715750610b7185336106e2565b610bd85760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016107e8565b610be58585858585611c91565b5050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c355760405162461bcd60e51b81526004016107e8906134d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c67611e8a565b6001600160a01b031614610c8d5760405162461bcd60e51b81526004016107e890613524565b610c9681611eb8565b60408051600080825260208201909252610cb291839190611ee2565b50565b603e546001600160a01b03163314610cdf5760405162461bcd60e51b81526004016107e8906135ff565b60d955565b600081815260096020526040902060048101546002909101546001600160a01b0316338114610d645760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652070726f604482015265706f73616c2160d01b60648201526084016107e8565b42821115610db45760405162461bcd60e51b815260206004820152601760248201527f566f74696e67206973206e6f742066696e69736865642100000000000000000060448201526064016107e8565b33600090815260de602090815260408083208684529091529020548015610e1f57604051339082156108fc029083906000818181858888f19350505050158015610e02573d6000803e3d6000fd5b5033600090815260de602090815260408083208784529091528120555b50505050565b60608151835114610e8a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107e8565b6000835167ffffffffffffffff811115610eb457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610edd578160200160208202803683370190505b50905060005b8451811015610f7f57610f44858281518110610f0f57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610f3757634e487b7160e01b600052603260045260246000fd5b6020026020010151610780565b828281518110610f6457634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610f78816137a5565b9050610ee3565b509392505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610fd05760405162461bcd60e51b81526004016107e8906134d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611002611e8a565b6001600160a01b0316146110285760405162461bcd60e51b81526004016107e890613524565b61103182611eb8565b61103d82826001611ee2565b5050565b603e546001600160a01b0316331461106b5760405162461bcd60e51b81526004016107e8906135ff565b6110756000612026565b565b600b54610100900460ff1661109257600b5460ff1615611096565b303b155b6110f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107e8565b600b54610100900460ff1615801561111b57600b805461ffff19166101011790555b603e546001600160a01b031633146111455760405162461bcd60e51b81526004016107e8906135ff565b61114d612078565b6111556120af565b61115e886120e6565b611167866120f9565b6111708561214f565b61117b838389611aac565b5061118687866121b0565b61118f846122d9565b61119887611b5c565b80156111aa57600b805461ff00191690555b5050505050505050565b61103d338383612380565b603e546001600160a01b031633146111e95760405162461bcd60e51b81526004016107e8906135ff565b60e080546001600160a01b0319166001600160a01b0392909216919091179055565b60006112173383610780565b9050600081116112785760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652065787460448201526532b739b4b7b760d11b60648201526084016107e8565b600082815260db602052604081205490808061129384611a80565b92509250925060006112a984848460d754612461565b600081815260da60209081526040808320805460ff1916600117905560dc8252918290208a905581518381526001600160a01b0388169181019190915290810185905233606082015260a0608082018190526006908201526552454d4f564560d01b60c08201529091507f43bbe839ef82dc941f31c1b50c3aef00ac608996af8aaff4ac3e6e5bf6eae8749060e00160405180910390a150505050505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e9060240160206040518083038186803b15801561138c57600080fd5b505afa1580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c49190612f62565b60405163020604bf60e21b8152600481018490529091506000906001600160a01b0385169063081812fc9060240160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190612f62565b90506001600160a01b03821633146114955760405162461bcd60e51b8152602060048201526016602482015275596f7520617265206e6f7420746865206f776e65722160501b60448201526064016107e8565b6001600160a01b03811630146114ed5760405162461bcd60e51b815260206004820152601960248201527f5265616c6d2073686f756c6420626520617070726f766564210000000000000060448201526064016107e8565b60006114fd85853360d754612461565b600081815260da60205260409020805460ff1916905560d954909150156116685760d954341461157a5760405162461bcd60e51b815260206004820152602260248201527f6d73672e76616c75652073686f756c6420657175616c206465706f7369744665604482015261652160f01b60648201526084016107e8565b60d4543490156115c857600061271060d4543461159791906136db565b6115a191906136bb565b90506115ad81836136fa565b91508060df60008282546115c191906136a3565b9091555050505b60d5541561163757600061271060d554346115e391906136db565b6115ed91906136bb565b90506115f981836136fa565b60e0546040519193506001600160a01b03169082156108fc029083906000818181858888f19350505050158015611634573d6000803e3d6000fd5b50505b33600090815260de60209081526040808320858452909152812080548392906116619084906136a3565b9091555050505b604080518281526001600160a01b038716602082015290810185905233606082015260a0608082018190526003908201526210511160ea1b60c08201527f43bbe839ef82dc941f31c1b50c3aef00ac608996af8aaff4ac3e6e5bf6eae8749060e00160405180910390a15050505050565b603e546001600160a01b031633146117035760405162461bcd60e51b81526004016107e8906135ff565b610cb2816120f9565b603e546001600160a01b031633146117365760405162461bcd60e51b81526004016107e8906135ff565b60d755565b6001600160a01b038516331480611757575061175785336106e2565b6117b55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016107e8565b610be5858585858561252d565b603e546001600160a01b031633146117ec5760405162461bcd60e51b81526004016107e8906135ff565b6001600160a01b0381166118515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107e8565b610cb281612026565b6000818152600960205260408120546001600160a01b03166118b65760405162461bcd60e51b8152602060048201526015602482015274139bdb88195e1a5cdd195b9d081c1c9bdc1bdcd85b605a1b60448201526064016107e8565b336000908152600a6020908152604080832085845290915290205460ff161561192d5760405162461bcd60e51b815260206004820152602360248201527f43616e277420766f746520666f722073616d652070726f706f73616c2074776960448201526263652160e81b60648201526084016107e8565b60008281526009602052604090206004015442106119845760405162461bcd60e51b8152602060048201526014602482015273141c9bdc1bdcd85b081a185cc8195e1c1a5c995960621b60448201526064016107e8565b336000908152600860205260409020546119e05760405162461bcd60e51b815260206004820152601c60248201527f596f7520646f206e6f74206861766520766f74696e6720706f7765720000000060448201526064016107e8565b3360009081526008602090815260408083205485845260099092528220600301805491929091611a119084906136a3565b9091555050336000908152600a602090815260408083208584529091529020805460ff1916600117905560075460045461271091611a4e916136db565b611a5891906136bb565b6000838152600960205260409020600301541115611a7857506001919050565b506000919050565b6000908152600960205260409020805460018201546002909201546001600160a01b0391821693911690565b6040516323b872dd60e01b81526001600160a01b03828116600483015230602483015260448201849052600091908516906323b872dd90606401600060405180830381600087803b158015611b0057600080fd5b505af1158015611b14573d6000803e3d6000fd5b50505050600160d66000828254611b2b91906136a3565b92505081905550611b508260d654600160405180602001604052806000815250612653565b5060d6545b9392505050565b61271060046000828254611b7091906136a3565b909155505060065460009061271090611b8990826136db565b611b9391906136bb565b90506000611ba3826127106136fa565b6005546001600160a01b0316600090815260086020526040812080549293508492909190611bd29084906136a3565b90915550506001600160a01b03831660009081526008602052604081208054839290611bff9084906136a3565b9091555050505050565b6040516323b872dd60e01b81523060048201526001600160a01b038381166024830152604482018590528516906323b872dd90606401600060405180830381600087803b158015611c5957600080fd5b505af1158015611c6d573d6000803e3d6000fd5b50505050610e1f82826001612754565b61271060046000828254611b7091906136fa565b8151835114611cf35760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107e8565b6001600160a01b038416611d195760405162461bcd60e51b81526004016107e890613570565b3360005b8451811015611e1c576000858281518110611d4857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611d7457634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611dc45760405162461bcd60e51b81526004016107e8906135b5565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611e019084906136a3565b9250508190555050505080611e15906137a5565b9050611d1d565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e6c929190613458565b60405180910390a4611e828187878787876128ce565b505050505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b603e546001600160a01b03163314610cb25760405162461bcd60e51b81526004016107e8906135ff565b6000611eec611e8a565b9050611ef784612a39565b600083511180611f045750815b15611f1557611f138484612ade565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610be557805460ff191660011781556040516001600160a01b0383166024820152611f9490869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612ade565b50805460ff19168155611fa5611e8a565b6001600160a01b0316826001600160a01b03161461201d5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016107e8565b610be585612bc9565b603e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600b54610100900460ff1661209f5760405162461bcd60e51b81526004016107e890613634565b6120a7612c09565b611075612c30565b600b54610100900460ff166120d65760405162461bcd60e51b81526004016107e890613634565b6120de612c09565b611075612c09565b805161103d906002906020840190612dbc565b612710811061214a5760405162461bcd60e51b815260206004820152601c60248201527f74617852617465206d757374206265203c207468616e2031303030300000000060448201526064016107e8565b60d455565b61271081106121ab5760405162461bcd60e51b815260206004820152602260248201527f63726561746f7253686172655f206d757374206265203c207468616e20313030604482015261030360f41b60648201526084016107e8565b60d855565b6001600160a01b0382166122125760405162461bcd60e51b8152602060048201526024808201527f63726561746f72416464726573732063616e27742062652061646472657373206044820152637a65726f60e01b60648201526084016107e8565b600081116122625760405162461bcd60e51b815260206004820152601d60248201527f63726561746f725368617265206d757374206265203e207468616e203000000060448201526064016107e8565b61271081106122b35760405162461bcd60e51b815260206004820152601d60248201527f63726561746f725368617265206d757374206265203d3c20313030303000000060448201526064016107e8565b600580546001600160a01b0319166001600160a01b039390931692909217909155600655565b600081116123295760405162461bcd60e51b815260206004820181905260248201527f766f74696e67436f6e73656e737573206d757374206265203e207468616e203060448201526064016107e8565b61271081111561237b5760405162461bcd60e51b815260206004820181905260248201527f766f74696e67436f6e73656e737573206d757374206265203d3c20313030303060448201526064016107e8565b600755565b816001600160a01b0316836001600160a01b031614156123f45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107e8565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006040518060a00160405280866001600160a01b03168152602001858152602001846001600160a01b031681526020016000815260200183426124a591906136a3565b9052600380546000908152600960209081526040808320855181546001600160a01b03199081166001600160a01b039283161783559387015160018084019190915592870151600283018054909516911617909255606085015182850155608090940151600490910155815461251c9084906136a3565b909155505060035495945050505050565b6001600160a01b0384166125535760405162461bcd60e51b81526004016107e890613570565b3361256c81878761256388612c60565b610be588612c60565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156125ad5760405162461bcd60e51b81526004016107e8906135b5565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906125ea9084906136a3565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461264a828888888888612cb9565b50505050505050565b6001600160a01b0384166126b35760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107e8565b336126c48160008761256388612c60565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906126f49084906136a3565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610be581600087878787612cb9565b6001600160a01b0383166127b65760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016107e8565b336127e6818560006127c787612c60565b6127d087612c60565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156128635760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016107e8565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b15611e825760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061291290899089908890889088906004016133a2565b602060405180830381600087803b15801561292c57600080fd5b505af192505050801561295c575060408051601f3d908101601f1916820190925261295991810190613250565b60015b612a09576129686137ec565b806308c379a014156129a2575061297d613804565b8061298857506129a4565b8060405162461bcd60e51b81526004016107e8919061347d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107e8565b6001600160e01b0319811663bc197c8160e01b1461264a5760405162461bcd60e51b81526004016107e890613490565b803b612a9d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107e8565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b612b3d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107e8565b600080846001600160a01b031684604051612b589190613386565b600060405180830381855af49150503d8060008114612b93576040519150601f19603f3d011682016040523d82523d6000602084013e612b98565b606091505b5091509150612bc082826040518060600160405280602781526020016138ba60279139612d83565b95945050505050565b612bd281612a39565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600b54610100900460ff166110755760405162461bcd60e51b81526004016107e890613634565b600b54610100900460ff16612c575760405162461bcd60e51b81526004016107e890613634565b61107533612026565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612ca857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611e825760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612cfd9089908990889088908890600401613400565b602060405180830381600087803b158015612d1757600080fd5b505af1925050508015612d47575060408051601f3d908101601f19168201909252612d4491810190613250565b60015b612d53576129686137ec565b6001600160e01b0319811663f23a6e6160e01b1461264a5760405162461bcd60e51b81526004016107e890613490565b60608315612d92575081611b55565b825115612da25782518084602001fd5b8160405162461bcd60e51b81526004016107e8919061347d565b828054612dc89061373d565b90600052602060002090601f016020900481019282612dea5760008555612e30565b82601f10612e0357805160ff1916838001178555612e30565b82800160010185558215612e30579182015b82811115612e30578251825591602001919060010190612e15565b50612e3c929150612e40565b5090565b5b80821115612e3c5760008155600101612e41565b600067ffffffffffffffff831115612e6f57612e6f6137d6565b604051612e86601f8501601f191660200182613778565b809150838152848484011115612e9b57600080fd5b83836020830137600060208583010152509392505050565b600082601f830112612ec3578081fd5b81356020612ed08261367f565b604051612edd8282613778565b8381528281019150858301600585901b87018401881015612efc578586fd5b855b85811015612f1a57813584529284019290840190600101612efe565b5090979650505050505050565b600082601f830112612f37578081fd5b611b5583833560208501612e55565b600060208284031215612f57578081fd5b8135611b558161388e565b600060208284031215612f73578081fd5b8151611b558161388e565b60008060408385031215612f90578081fd5b8235612f9b8161388e565b91506020830135612fab8161388e565b809150509250929050565b600080600080600060a08688031215612fcd578081fd5b8535612fd88161388e565b94506020860135612fe88161388e565b9350604086013567ffffffffffffffff80821115613004578283fd5b61301089838a01612eb3565b94506060880135915080821115613025578283fd5b61303189838a01612eb3565b93506080880135915080821115613046578283fd5b5061305388828901612f27565b9150509295509295909350565b600080600080600060a08688031215613077578081fd5b85356130828161388e565b945060208601356130928161388e565b93506040860135925060608601359150608086013567ffffffffffffffff8111156130bb578182fd5b61305388828901612f27565b600080604083850312156130d9578182fd5b82356130e48161388e565b915060208301358015158114612fab578182fd5b6000806040838503121561310a578182fd5b82356131158161388e565b9150602083013567ffffffffffffffff811115613130578182fd5b61313c85828601612f27565b9150509250929050565b60008060408385031215613158578182fd5b82356131638161388e565b946020939093013593505050565b60008060408385031215613183578182fd5b823567ffffffffffffffff8082111561319a578384fd5b818501915085601f8301126131ad578384fd5b813560206131ba8261367f565b6040516131c78282613778565b8381528281019150858301600585901b870184018b10156131e6578889fd5b8896505b848710156132115780356131fd8161388e565b8352600196909601959183019183016131ea565b5096505086013592505080821115613227578283fd5b5061313c85828601612eb3565b600060208284031215613245578081fd5b8135611b55816138a3565b600060208284031215613261578081fd5b8151611b55816138a3565b600080600080600080600060e0888a031215613286578485fd5b873567ffffffffffffffff81111561329c578586fd5b8801601f81018a136132ac578586fd5b6132bb8a823560208401612e55565b97505060208801356132cc8161388e565b955060408801359450606088013593506080880135925060a08801356132f18161388e565b8092505060c0880135905092959891949750929550565b600060208284031215613319578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561334f57815187529582019590820190600101613333565b509495945050505050565b60008151808452613372816020860160208601613711565b601f01601f19169290920160200192915050565b60008251613398818460208701613711565b9190910192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906133ce90830186613320565b82810360608401526133e08186613320565b905082810360808401526133f4818561335a565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061343a9083018461335a565b979650505050505050565b602081526000611b556020830184613320565b60408152600061346b6040830185613320565b8281036020840152612bc08185613320565b602081526000611b55602083018461335a565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600067ffffffffffffffff821115613699576136996137d6565b5060051b60200190565b600082198211156136b6576136b66137c0565b500190565b6000826136d657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156136f5576136f56137c0565b500290565b60008282101561370c5761370c6137c0565b500390565b60005b8381101561372c578181015183820152602001613714565b83811115610e1f5750506000910152565b600181811c9082168061375157607f821691505b6020821081141561377257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561379e5761379e6137d6565b6040525050565b60006000198214156137b9576137b96137c0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561380157600481823e5160e01c5b90565b600060443d10156138125790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561384257505050505090565b828501915081518181111561385a5750505050505090565b843d87010160208285010111156138745750505050505090565b61388360208286010187613778565b509095945050505050565b6001600160a01b0381168114610cb257600080fd5b6001600160e01b031981168114610cb257600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204fcc784f40d4517bb4e7cc4412414a138ab8ddb5f0ec588eb780ed8d165abe4864736f6c63430008040033a2646970667358221220c6dd8317ffa2d05358381c4fe5ae96d419f5b4cbb3096a1f72c3f2ef3a0448cf64736f6c63430008040033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636350fc1c14610030575b600080fd5b61004361003e3660046101c6565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b600060405161006d9061019d565b604051809103906000f080158015610089573d6000803e3d6000fd5b50604051639dd8d33560e01b81529091506001600160a01b03821690639dd8d335906100c5908a9033908b908b908b908b908b906004016102f3565b600060405180830381600087803b1580156100df57600080fd5b505af11580156100f3573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038416925063f2fde38b9150602401600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b505050507f66d4fc0fb87c297a8030f27ab603acc05cb3839e61b3c64c31c4aafd2d35f3c38787873387878760405161018b9796959493929190610343565b60405180910390a19695505050505050565b613a80806103a783390190565b80356001600160a01b03811681146101c157600080fd5b919050565b60008060008060008060c087890312156101de578182fd5b863567ffffffffffffffff808211156101f5578384fd5b818901915089601f830112610208578384fd5b81358181111561021a5761021a610390565b604051601f8201601f19908116603f0116810190838211818310171561024257610242610390565b816040528281528c602084870101111561025a578687fd5b826020860160208301378660208483010152809a505050505050602087013594506040870135935060608701359250610295608088016101aa565b915060a087013590509295509295509295565b60008151808452815b818110156102cd576020818501810151868301820152016102b1565b818111156102de5782602083870101525b50601f01601f19169290920160200192915050565b60e08152600061030660e083018a6102a8565b6001600160a01b0398891660208401526040830197909752506060810194909452608084019290925290931660a082015260c00191909152919050565b60e08152600061035660e083018a6102a8565b60208301989098525060408101959095526001600160a01b039384166060860152918316608085015260a08401521660c090910152919050565b634e487b7160e01b600052604160045260246000fdfe60a06040523060601b6080523480156200001857600080fd5b5060408051602081019091526000815262000033816200003a565b5062000136565b80516200004f90600290602084019062000053565b5050565b8280546200006190620000f9565b90600052602060002090601f016020900481019282620000855760008555620000d0565b82601f10620000a057805160ff1916838001178555620000d0565b82800160010185558215620000d0579182015b82811115620000d0578251825591602001919060010190620000b3565b50620000de929150620000e2565b5090565b5b80821115620000de5760008155600101620000e3565b600181811c908216806200010e57607f821691505b602082108114156200013057634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c6139166200016a60003960008181610bf701528181610c3701528181610f920152610fd201526139166000f3fe6080604052600436106102035760003560e01c80635ab24f5911610118578063b0e21e8a116100a0578063d7c819761161006f578063d7c81976146106a7578063e985e9c5146106c7578063f242432a14610710578063f2fde38b14610730578063f4b5157b1461075057600080fd5b8063b0e21e8a1461063e578063b920ef7114610654578063b92a479e14610674578063c6d69a301461068757600080fd5b8063771a3a1d116100e7578063771a3a1d146105aa5780638da5cb5b146105c05780639dd8d335146105de578063a22cb465146105fe578063a42dce801461061e57600080fd5b80635ab24f591461053357806367a5279314610569578063715018a61461057f57806377174f851461059457600080fd5b80632bb5edec1161019b57806347c661401161016a57806347c6614014610483578063490ae210146104b35780634df161a1146104d35780634e1273f4146104f35780634f1ef2861461052057600080fd5b80632bb5edec146103e05780632eb2c2d6146104165780633659cfe61461043657806339997a021461045657600080fd5b80630e89341c116101d75780630e89341c1461031c57806317826ac41461034957806319be726d1461039a5780631cbe482d146103ca57600080fd5b8062fdd58e14610208578063013cf08b1461023b57806301ffc9a7146102ca578063045c6ce0146102fa575b600080fd5b34801561021457600080fd5b50610228610223366004613146565b610780565b6040519081526020015b60405180910390f35b34801561024757600080fd5b50610291610256366004613308565b600960205260009081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949293909116919085565b604080516001600160a01b039687168152602081019590955292909416918301919091526060820152608081019190915260a001610232565b3480156102d657600080fd5b506102ea6102e5366004613234565b610817565b6040519015158152602001610232565b34801561030657600080fd5b5061031a610315366004613308565b610869565b005b34801561032857600080fd5b5061033c610337366004613308565b610ac1565b604051610232919061347d565b34801561035557600080fd5b50610382610364366004613308565b6000908152600960205260409020600201546001600160a01b031690565b6040516001600160a01b039091168152602001610232565b3480156103a657600080fd5b506102286103b5366004613308565b60009081526009602052604090206001015490565b3480156103d657600080fd5b5061022860d75481565b3480156103ec57600080fd5b506103826103fb366004613308565b600090815260dd60205260409020546001600160a01b031690565b34801561042257600080fd5b5061031a610431366004612fb6565b610b55565b34801561044257600080fd5b5061031a610451366004612f46565b610bec565b34801561046257600080fd5b50610228610471366004612f46565b60086020526000908152604090205481565b34801561048f57600080fd5b5061022861049e366004613308565b60009081526009602052604090206003015490565b3480156104bf57600080fd5b5061031a6104ce366004613308565b610cb5565b3480156104df57600080fd5b5061031a6104ee366004613308565b610ce4565b3480156104ff57600080fd5b5061051361050e366004613171565b610e25565b6040516102329190613445565b61031a61052e3660046130f8565b610f87565b34801561053f57600080fd5b5061038261054e366004613308565b6000908152600960205260409020546001600160a01b031690565b34801561057557600080fd5b5061022860d95481565b34801561058b57600080fd5b5061031a611041565b3480156105a057600080fd5b5061022860045481565b3480156105b657600080fd5b5061022860d45481565b3480156105cc57600080fd5b50603e546001600160a01b0316610382565b3480156105ea57600080fd5b5061031a6105f936600461326c565b611077565b34801561060a57600080fd5b5061031a6106193660046130c7565b6111b4565b34801561062a57600080fd5b5061031a610639366004612f46565b6111bf565b34801561064a57600080fd5b5061022860d55481565b34801561066057600080fd5b5061031a61066f366004613308565b61120b565b61031a610682366004613146565b611349565b34801561069357600080fd5b5061031a6106a2366004613308565b6116d9565b3480156106b357600080fd5b5061031a6106c2366004613308565b61170c565b3480156106d357600080fd5b506102ea6106e2366004612f7e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561071c57600080fd5b5061031a61072b366004613060565b61173b565b34801561073c57600080fd5b5061031a61074b366004612f46565b6117c2565b34801561075c57600080fd5b5061022861076b366004613308565b60009081526009602052604090206004015490565b60006001600160a01b0383166107f15760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061084857506001600160e01b031982166303a24d0760e21b145b8061086357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60006108748261185a565b90508015610a8557600082815260da602052604081205460ff1660018111156108ad57634e487b7160e01b600052602160045260246000fd5b14156109b15760008060006108c185611a80565b92509250925060006108d4848484611aac565b600081815260db6020526040902087905590506108f082611b5c565b33600090815260de60209081526040808320898452909152902054801561095b57604051339082156108fc029083906000818181858888f1935050505015801561093e573d6000803e3d6000fd5b5033600090815260de602090815260408083208a84529091528120555b604080518881526001600160a01b0387166020820152908101859052606081018390527fb180d23f07a381509523d52a37e7da63c2b098fbccf7e84dea6b6648e062e15c9060800160405180910390a150505050505b6001600083815260da602052604090205460ff1660018111156109e457634e487b7160e01b600052602160045260246000fd5b1415610a8557600082815260dc602090815260408083205480845260db90925282205490918080610a1484611a80565b925092509250610a2683838388611c09565b610a2f81611c7d565b604080518881526001600160a01b0385166020820152908101839052606081018690527fb180d23f07a381509523d52a37e7da63c2b098fbccf7e84dea6b6648e062e15c9060800160405180910390a150505050505b604080518381523360208201527f030b0f8dcd86a031eddb071f91882edeac8173663ba775713b677b42b51be44b910160405180910390a15050565b606060028054610ad09061373d565b80601f0160208091040260200160405190810160405280929190818152602001828054610afc9061373d565b8015610b495780601f10610b1e57610100808354040283529160200191610b49565b820191906000526020600020905b815481529060010190602001808311610b2c57829003601f168201915b50505050509050919050565b6001600160a01b038516331480610b715750610b7185336106e2565b610bd85760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016107e8565b610be58585858585611c91565b5050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c355760405162461bcd60e51b81526004016107e8906134d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c67611e8a565b6001600160a01b031614610c8d5760405162461bcd60e51b81526004016107e890613524565b610c9681611eb8565b60408051600080825260208201909252610cb291839190611ee2565b50565b603e546001600160a01b03163314610cdf5760405162461bcd60e51b81526004016107e8906135ff565b60d955565b600081815260096020526040902060048101546002909101546001600160a01b0316338114610d645760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652070726f604482015265706f73616c2160d01b60648201526084016107e8565b42821115610db45760405162461bcd60e51b815260206004820152601760248201527f566f74696e67206973206e6f742066696e69736865642100000000000000000060448201526064016107e8565b33600090815260de602090815260408083208684529091529020548015610e1f57604051339082156108fc029083906000818181858888f19350505050158015610e02573d6000803e3d6000fd5b5033600090815260de602090815260408083208784529091528120555b50505050565b60608151835114610e8a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107e8565b6000835167ffffffffffffffff811115610eb457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610edd578160200160208202803683370190505b50905060005b8451811015610f7f57610f44858281518110610f0f57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610f3757634e487b7160e01b600052603260045260246000fd5b6020026020010151610780565b828281518110610f6457634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610f78816137a5565b9050610ee3565b509392505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610fd05760405162461bcd60e51b81526004016107e8906134d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611002611e8a565b6001600160a01b0316146110285760405162461bcd60e51b81526004016107e890613524565b61103182611eb8565b61103d82826001611ee2565b5050565b603e546001600160a01b0316331461106b5760405162461bcd60e51b81526004016107e8906135ff565b6110756000612026565b565b600b54610100900460ff1661109257600b5460ff1615611096565b303b155b6110f95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107e8565b600b54610100900460ff1615801561111b57600b805461ffff19166101011790555b603e546001600160a01b031633146111455760405162461bcd60e51b81526004016107e8906135ff565b61114d612078565b6111556120af565b61115e886120e6565b611167866120f9565b6111708561214f565b61117b838389611aac565b5061118687866121b0565b61118f846122d9565b61119887611b5c565b80156111aa57600b805461ff00191690555b5050505050505050565b61103d338383612380565b603e546001600160a01b031633146111e95760405162461bcd60e51b81526004016107e8906135ff565b60e080546001600160a01b0319166001600160a01b0392909216919091179055565b60006112173383610780565b9050600081116112785760405162461bcd60e51b815260206004820152602660248201527f596f7520617265206e6f7420746865206f776e6572206f66207468652065787460448201526532b739b4b7b760d11b60648201526084016107e8565b600082815260db602052604081205490808061129384611a80565b92509250925060006112a984848460d754612461565b600081815260da60209081526040808320805460ff1916600117905560dc8252918290208a905581518381526001600160a01b0388169181019190915290810185905233606082015260a0608082018190526006908201526552454d4f564560d01b60c08201529091507f43bbe839ef82dc941f31c1b50c3aef00ac608996af8aaff4ac3e6e5bf6eae8749060e00160405180910390a150505050505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e9060240160206040518083038186803b15801561138c57600080fd5b505afa1580156113a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c49190612f62565b60405163020604bf60e21b8152600481018490529091506000906001600160a01b0385169063081812fc9060240160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190612f62565b90506001600160a01b03821633146114955760405162461bcd60e51b8152602060048201526016602482015275596f7520617265206e6f7420746865206f776e65722160501b60448201526064016107e8565b6001600160a01b03811630146114ed5760405162461bcd60e51b815260206004820152601960248201527f5265616c6d2073686f756c6420626520617070726f766564210000000000000060448201526064016107e8565b60006114fd85853360d754612461565b600081815260da60205260409020805460ff1916905560d954909150156116685760d954341461157a5760405162461bcd60e51b815260206004820152602260248201527f6d73672e76616c75652073686f756c6420657175616c206465706f7369744665604482015261652160f01b60648201526084016107e8565b60d4543490156115c857600061271060d4543461159791906136db565b6115a191906136bb565b90506115ad81836136fa565b91508060df60008282546115c191906136a3565b9091555050505b60d5541561163757600061271060d554346115e391906136db565b6115ed91906136bb565b90506115f981836136fa565b60e0546040519193506001600160a01b03169082156108fc029083906000818181858888f19350505050158015611634573d6000803e3d6000fd5b50505b33600090815260de60209081526040808320858452909152812080548392906116619084906136a3565b9091555050505b604080518281526001600160a01b038716602082015290810185905233606082015260a0608082018190526003908201526210511160ea1b60c08201527f43bbe839ef82dc941f31c1b50c3aef00ac608996af8aaff4ac3e6e5bf6eae8749060e00160405180910390a15050505050565b603e546001600160a01b031633146117035760405162461bcd60e51b81526004016107e8906135ff565b610cb2816120f9565b603e546001600160a01b031633146117365760405162461bcd60e51b81526004016107e8906135ff565b60d755565b6001600160a01b038516331480611757575061175785336106e2565b6117b55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016107e8565b610be5858585858561252d565b603e546001600160a01b031633146117ec5760405162461bcd60e51b81526004016107e8906135ff565b6001600160a01b0381166118515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107e8565b610cb281612026565b6000818152600960205260408120546001600160a01b03166118b65760405162461bcd60e51b8152602060048201526015602482015274139bdb88195e1a5cdd195b9d081c1c9bdc1bdcd85b605a1b60448201526064016107e8565b336000908152600a6020908152604080832085845290915290205460ff161561192d5760405162461bcd60e51b815260206004820152602360248201527f43616e277420766f746520666f722073616d652070726f706f73616c2074776960448201526263652160e81b60648201526084016107e8565b60008281526009602052604090206004015442106119845760405162461bcd60e51b8152602060048201526014602482015273141c9bdc1bdcd85b081a185cc8195e1c1a5c995960621b60448201526064016107e8565b336000908152600860205260409020546119e05760405162461bcd60e51b815260206004820152601c60248201527f596f7520646f206e6f74206861766520766f74696e6720706f7765720000000060448201526064016107e8565b3360009081526008602090815260408083205485845260099092528220600301805491929091611a119084906136a3565b9091555050336000908152600a602090815260408083208584529091529020805460ff1916600117905560075460045461271091611a4e916136db565b611a5891906136bb565b6000838152600960205260409020600301541115611a7857506001919050565b506000919050565b6000908152600960205260409020805460018201546002909201546001600160a01b0391821693911690565b6040516323b872dd60e01b81526001600160a01b03828116600483015230602483015260448201849052600091908516906323b872dd90606401600060405180830381600087803b158015611b0057600080fd5b505af1158015611b14573d6000803e3d6000fd5b50505050600160d66000828254611b2b91906136a3565b92505081905550611b508260d654600160405180602001604052806000815250612653565b5060d6545b9392505050565b61271060046000828254611b7091906136a3565b909155505060065460009061271090611b8990826136db565b611b9391906136bb565b90506000611ba3826127106136fa565b6005546001600160a01b0316600090815260086020526040812080549293508492909190611bd29084906136a3565b90915550506001600160a01b03831660009081526008602052604081208054839290611bff9084906136a3565b9091555050505050565b6040516323b872dd60e01b81523060048201526001600160a01b038381166024830152604482018590528516906323b872dd90606401600060405180830381600087803b158015611c5957600080fd5b505af1158015611c6d573d6000803e3d6000fd5b50505050610e1f82826001612754565b61271060046000828254611b7091906136fa565b8151835114611cf35760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107e8565b6001600160a01b038416611d195760405162461bcd60e51b81526004016107e890613570565b3360005b8451811015611e1c576000858281518110611d4857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611d7457634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611dc45760405162461bcd60e51b81526004016107e8906135b5565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611e019084906136a3565b9250508190555050505080611e15906137a5565b9050611d1d565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e6c929190613458565b60405180910390a4611e828187878787876128ce565b505050505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b603e546001600160a01b03163314610cb25760405162461bcd60e51b81526004016107e8906135ff565b6000611eec611e8a565b9050611ef784612a39565b600083511180611f045750815b15611f1557611f138484612ade565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610be557805460ff191660011781556040516001600160a01b0383166024820152611f9490869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052612ade565b50805460ff19168155611fa5611e8a565b6001600160a01b0316826001600160a01b03161461201d5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016107e8565b610be585612bc9565b603e80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600b54610100900460ff1661209f5760405162461bcd60e51b81526004016107e890613634565b6120a7612c09565b611075612c30565b600b54610100900460ff166120d65760405162461bcd60e51b81526004016107e890613634565b6120de612c09565b611075612c09565b805161103d906002906020840190612dbc565b612710811061214a5760405162461bcd60e51b815260206004820152601c60248201527f74617852617465206d757374206265203c207468616e2031303030300000000060448201526064016107e8565b60d455565b61271081106121ab5760405162461bcd60e51b815260206004820152602260248201527f63726561746f7253686172655f206d757374206265203c207468616e20313030604482015261030360f41b60648201526084016107e8565b60d855565b6001600160a01b0382166122125760405162461bcd60e51b8152602060048201526024808201527f63726561746f72416464726573732063616e27742062652061646472657373206044820152637a65726f60e01b60648201526084016107e8565b600081116122625760405162461bcd60e51b815260206004820152601d60248201527f63726561746f725368617265206d757374206265203e207468616e203000000060448201526064016107e8565b61271081106122b35760405162461bcd60e51b815260206004820152601d60248201527f63726561746f725368617265206d757374206265203d3c20313030303000000060448201526064016107e8565b600580546001600160a01b0319166001600160a01b039390931692909217909155600655565b600081116123295760405162461bcd60e51b815260206004820181905260248201527f766f74696e67436f6e73656e737573206d757374206265203e207468616e203060448201526064016107e8565b61271081111561237b5760405162461bcd60e51b815260206004820181905260248201527f766f74696e67436f6e73656e737573206d757374206265203d3c20313030303060448201526064016107e8565b600755565b816001600160a01b0316836001600160a01b031614156123f45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107e8565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006040518060a00160405280866001600160a01b03168152602001858152602001846001600160a01b031681526020016000815260200183426124a591906136a3565b9052600380546000908152600960209081526040808320855181546001600160a01b03199081166001600160a01b039283161783559387015160018084019190915592870151600283018054909516911617909255606085015182850155608090940151600490910155815461251c9084906136a3565b909155505060035495945050505050565b6001600160a01b0384166125535760405162461bcd60e51b81526004016107e890613570565b3361256c81878761256388612c60565b610be588612c60565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156125ad5760405162461bcd60e51b81526004016107e8906135b5565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906125ea9084906136a3565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461264a828888888888612cb9565b50505050505050565b6001600160a01b0384166126b35760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107e8565b336126c48160008761256388612c60565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906126f49084906136a3565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610be581600087878787612cb9565b6001600160a01b0383166127b65760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016107e8565b336127e6818560006127c787612c60565b6127d087612c60565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156128635760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016107e8565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b15611e825760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061291290899089908890889088906004016133a2565b602060405180830381600087803b15801561292c57600080fd5b505af192505050801561295c575060408051601f3d908101601f1916820190925261295991810190613250565b60015b612a09576129686137ec565b806308c379a014156129a2575061297d613804565b8061298857506129a4565b8060405162461bcd60e51b81526004016107e8919061347d565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107e8565b6001600160e01b0319811663bc197c8160e01b1461264a5760405162461bcd60e51b81526004016107e890613490565b803b612a9d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107e8565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b612b3d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107e8565b600080846001600160a01b031684604051612b589190613386565b600060405180830381855af49150503d8060008114612b93576040519150601f19603f3d011682016040523d82523d6000602084013e612b98565b606091505b5091509150612bc082826040518060600160405280602781526020016138ba60279139612d83565b95945050505050565b612bd281612a39565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600b54610100900460ff166110755760405162461bcd60e51b81526004016107e890613634565b600b54610100900460ff16612c575760405162461bcd60e51b81526004016107e890613634565b61107533612026565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612ca857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611e825760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612cfd9089908990889088908890600401613400565b602060405180830381600087803b158015612d1757600080fd5b505af1925050508015612d47575060408051601f3d908101601f19168201909252612d4491810190613250565b60015b612d53576129686137ec565b6001600160e01b0319811663f23a6e6160e01b1461264a5760405162461bcd60e51b81526004016107e890613490565b60608315612d92575081611b55565b825115612da25782518084602001fd5b8160405162461bcd60e51b81526004016107e8919061347d565b828054612dc89061373d565b90600052602060002090601f016020900481019282612dea5760008555612e30565b82601f10612e0357805160ff1916838001178555612e30565b82800160010185558215612e30579182015b82811115612e30578251825591602001919060010190612e15565b50612e3c929150612e40565b5090565b5b80821115612e3c5760008155600101612e41565b600067ffffffffffffffff831115612e6f57612e6f6137d6565b604051612e86601f8501601f191660200182613778565b809150838152848484011115612e9b57600080fd5b83836020830137600060208583010152509392505050565b600082601f830112612ec3578081fd5b81356020612ed08261367f565b604051612edd8282613778565b8381528281019150858301600585901b87018401881015612efc578586fd5b855b85811015612f1a57813584529284019290840190600101612efe565b5090979650505050505050565b600082601f830112612f37578081fd5b611b5583833560208501612e55565b600060208284031215612f57578081fd5b8135611b558161388e565b600060208284031215612f73578081fd5b8151611b558161388e565b60008060408385031215612f90578081fd5b8235612f9b8161388e565b91506020830135612fab8161388e565b809150509250929050565b600080600080600060a08688031215612fcd578081fd5b8535612fd88161388e565b94506020860135612fe88161388e565b9350604086013567ffffffffffffffff80821115613004578283fd5b61301089838a01612eb3565b94506060880135915080821115613025578283fd5b61303189838a01612eb3565b93506080880135915080821115613046578283fd5b5061305388828901612f27565b9150509295509295909350565b600080600080600060a08688031215613077578081fd5b85356130828161388e565b945060208601356130928161388e565b93506040860135925060608601359150608086013567ffffffffffffffff8111156130bb578182fd5b61305388828901612f27565b600080604083850312156130d9578182fd5b82356130e48161388e565b915060208301358015158114612fab578182fd5b6000806040838503121561310a578182fd5b82356131158161388e565b9150602083013567ffffffffffffffff811115613130578182fd5b61313c85828601612f27565b9150509250929050565b60008060408385031215613158578182fd5b82356131638161388e565b946020939093013593505050565b60008060408385031215613183578182fd5b823567ffffffffffffffff8082111561319a578384fd5b818501915085601f8301126131ad578384fd5b813560206131ba8261367f565b6040516131c78282613778565b8381528281019150858301600585901b870184018b10156131e6578889fd5b8896505b848710156132115780356131fd8161388e565b8352600196909601959183019183016131ea565b5096505086013592505080821115613227578283fd5b5061313c85828601612eb3565b600060208284031215613245578081fd5b8135611b55816138a3565b600060208284031215613261578081fd5b8151611b55816138a3565b600080600080600080600060e0888a031215613286578485fd5b873567ffffffffffffffff81111561329c578586fd5b8801601f81018a136132ac578586fd5b6132bb8a823560208401612e55565b97505060208801356132cc8161388e565b955060408801359450606088013593506080880135925060a08801356132f18161388e565b8092505060c0880135905092959891949750929550565b600060208284031215613319578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561334f57815187529582019590820190600101613333565b509495945050505050565b60008151808452613372816020860160208601613711565b601f01601f19169290920160200192915050565b60008251613398818460208701613711565b9190910192915050565b6001600160a01b0386811682528516602082015260a0604082018190526000906133ce90830186613320565b82810360608401526133e08186613320565b905082810360808401526133f4818561335a565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061343a9083018461335a565b979650505050505050565b602081526000611b556020830184613320565b60408152600061346b6040830185613320565b8281036020840152612bc08185613320565b602081526000611b55602083018461335a565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600067ffffffffffffffff821115613699576136996137d6565b5060051b60200190565b600082198211156136b6576136b66137c0565b500190565b6000826136d657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156136f5576136f56137c0565b500290565b60008282101561370c5761370c6137c0565b500390565b60005b8381101561372c578181015183820152602001613714565b83811115610e1f5750506000910152565b600181811c9082168061375157607f821691505b6020821081141561377257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561379e5761379e6137d6565b6040525050565b60006000198214156137b9576137b96137c0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561380157600481823e5160e01c5b90565b600060443d10156138125790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561384257505050505090565b828501915081518181111561385a5750505050505090565b843d87010160208285010111156138745750505050505090565b61388360208286010187613778565b509095945050505050565b6001600160a01b0381168114610cb257600080fd5b6001600160e01b031981168114610cb257600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204fcc784f40d4517bb4e7cc4412414a138ab8ddb5f0ec588eb780ed8d165abe4864736f6c63430008040033a2646970667358221220c6dd8317ffa2d05358381c4fe5ae96d419f5b4cbb3096a1f72c3f2ef3a0448cf64736f6c63430008040033",
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "storageLayout": {
        "storage": [],
        "types": null
      }
    }
  ],
  "implementation": "0x6df070Faca369523Eaf1C033C6D650829Df8BBE9",
  "devdoc": {
    "details": "this proxy is just a wrapper to make ERC1967Proxy compatible with hardhat-deploy",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}