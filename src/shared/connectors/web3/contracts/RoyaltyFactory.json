{
  "contractName": "RoyaltyFactory",
  "address": "0x56d11dc348c4A91a6ad6d63B9f6FA6F112eb7FB4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LoyaltyERC721Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allRoyalties",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "proofOfAuthenticity",
          "type": "string"
        }
      ],
      "name": "createRoyaltyERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "loyalty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "royaltyAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "proofOfAuthenticity",
          "type": "string"
        }
      ],
      "name": "createRoyaltyERC721Batch",
      "outputs": [
        {
          "internalType": "address",
          "name": "loyalty",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8904c4b63c957bc256bc5607fbcd8176b5ba99e64dbee9c0326e5b1aeadb9e6",
  "receipt": {
    "to": null,
    "from": "0x283DdEa5589aba63221653D9ED02aaa7D60a389B",
    "contractAddress": "0x56d11dc348c4A91a6ad6d63B9f6FA6F112eb7FB4",
    "transactionIndex": 14,
    "gasUsed": "2942106",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000108000000000000000000000000000000000000000000000002000000000800000000000000000000100000000004000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000100000000000000000000000100040000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x5353f17b99a3ad0f6299c48723d5c5110a2d486acbca481645026af130ff62ff",
    "transactionHash": "0xe8904c4b63c957bc256bc5607fbcd8176b5ba99e64dbee9c0326e5b1aeadb9e6",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 24154210,
        "transactionHash": "0xe8904c4b63c957bc256bc5607fbcd8176b5ba99e64dbee9c0326e5b1aeadb9e6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000283ddea5589aba63221653d9ed02aaa7d60a389b",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000014e7a8dca3e33000000000000000000000000000000000000000000000000006f7f733295e3e6c00000000000000000000000000000000000000000000052aac6e55112cbf298200000000000000000000000000000000000000000000000006e30f8a4cba5b3c00000000000000000000000000000000000000000000052aac833cba09630cb2",
        "logIndex": 36,
        "blockHash": "0x5353f17b99a3ad0f6299c48723d5c5110a2d486acbca481645026af130ff62ff"
      }
    ],
    "blockNumber": 24154210,
    "cumulativeGasUsed": "5792946",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "af7b24b64014f485dc9a157bb58e82b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LoyaltyERC721Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allRoyalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"proofOfAuthenticity\",\"type\":\"string\"}],\"name\":\"createRoyaltyERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"loyalty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"proofOfAuthenticity\",\"type\":\"string\"}],\"name\":\"createRoyaltyERC721Batch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"loyalty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFactory.sol\":\"RoyaltyFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x40cc76b7f62d20c90b3a18479ad0b1d20de7b2cc665cb3d7585362403651e62a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ERC721WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"./ERC721WithRoyaltyCore.sol\\\";\\r\\n\\r\\ncontract ERC721WithRoyalty is ERC721WithRoyaltyCore, ERC721, Ownable {\\r\\n    mapping(uint256 => string) private tokenToUri;\\r\\n\\r\\n    uint256 public counter;\\r\\n    mapping(uint256 => string) private _proofOfAuthenticity;\\r\\n\\r\\n    event RoyaltyNFT(\\r\\n        uint256 initialId,\\r\\n        uint256 amount,\\r\\n        address owner,\\r\\n        string uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps\\r\\n    );\\r\\n\\r\\n    bool public internalURIEnabled;\\r\\n\\r\\n    string private _internalURI;\\r\\n\\r\\n    function setInternalURI(string calldata internalURI_) public onlyOwner {\\r\\n        _internalURI = internalURI_;\\r\\n    }\\r\\n\\r\\n    constructor(string memory name, string memory symbol)\\r\\n        ERC721(name, symbol)\\r\\n    {}\\r\\n\\r\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royaltyConfigs)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setTokenRoyalties(royaltyConfigs);\\r\\n    }\\r\\n\\r\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        _setDefaultRoyalty(royalty);\\r\\n    }\\r\\n\\r\\n    function exists(uint256 tokenId) public view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    function mint(address to, string calldata uri) public {\\r\\n        counter = counter + 1;\\r\\n        _mint(to, counter, uri);\\r\\n    }\\r\\n\\r\\n    function proofOfAuthenticity(uint256 id) public view returns (string memory) {\\r\\n        return _proofOfAuthenticity[id];\\r\\n    }\\r\\n\\r\\n    function mintBatchWithRoyalty(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string calldata proofOfAuthenticity_\\r\\n    ) public onlyOwner {\\r\\n\\r\\n        uint256 initialId = counter + 1;\\r\\n\\r\\n        for (uint256 i = 0; i < amount; i++) {\\r\\n            _mintWithRoyalty(\\r\\n                to,\\r\\n                uri,\\r\\n                royaltyAddress,\\r\\n                bps,\\r\\n                proofOfAuthenticity_\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit RoyaltyNFT(initialId, amount, to, uri, royaltyAddress, bps);\\r\\n    }\\r\\n\\r\\n    function mintWithRoyalty(\\r\\n        address to,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string calldata proofOfAuthenticity_\\r\\n    ) public onlyOwner {\\r\\n\\r\\n        uint256 tokenId = counter + 1;\\r\\n\\r\\n        _mintWithRoyalty(\\r\\n            to,\\r\\n            uri,\\r\\n            royaltyAddress,\\r\\n            bps,\\r\\n            proofOfAuthenticity_\\r\\n        );\\r\\n\\r\\n        emit RoyaltyNFT(tokenId, 1, to, uri, royaltyAddress, bps);\\r\\n    }\\r\\n\\r\\n    function _mintWithRoyalty(\\r\\n        address to,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps,\\r\\n        string calldata proofOfAuthenticity_\\r\\n    ) internal {\\r\\n        counter = counter + 1;\\r\\n        _mint(to, counter, uri);\\r\\n\\r\\n        TokenRoyaltyConfig[] memory config = new TokenRoyaltyConfig[](1);\\r\\n        config[0] = TokenRoyaltyConfig(counter, royaltyAddress, bps);\\r\\n        _setTokenRoyalties(config);\\r\\n\\r\\n        _proofOfAuthenticity[counter] = proofOfAuthenticity_;\\r\\n    }\\r\\n\\r\\n    function safeMint(address to, string calldata uri) public onlyOwner {\\r\\n        counter = counter + 1;\\r\\n        _safeMint(to, counter, uri);\\r\\n    }\\r\\n\\r\\n    function safeMint(\\r\\n        address to,\\r\\n        string calldata uri,\\r\\n        bytes memory _data\\r\\n    ) public onlyOwner {\\r\\n        counter = counter + 1;\\r\\n        _safeMint(to, counter, uri, _data);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 tokenId) public {\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        if (internalURIEnabled) {\\r\\n            return _internalURI;\\r\\n        } else {\\r\\n            return tokenToUri[tokenId];\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721, ERC721WithRoyaltyCore)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        string calldata uri\\r\\n    ) private {\\r\\n        super._mint(to, tokenId);\\r\\n        tokenToUri[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        string calldata uri // bytes memory _data\\r\\n    ) private {\\r\\n        super._safeMint(to, tokenId);\\r\\n        tokenToUri[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        string calldata uri,\\r\\n        bytes memory _data\\r\\n    ) private {\\r\\n        super._safeMint(to, tokenId, _data);\\r\\n        tokenToUri[tokenId] = uri;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbf053deae5f2129747edb0c083f81b0f13f024efd4b1f4f7fee0554dfeae71f5\",\"license\":\"MIT\"},\"contracts/ERC721WithRoyaltyCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"./IERC721WithRoyalty.sol\\\";\\r\\n\\r\\nabstract contract ERC721WithRoyaltyCore is\\r\\n    IERC2981,\\r\\n    IERC721WithRoyalty,\\r\\n    ERC165\\r\\n{\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    TokenRoyalty public defaultRoyalty;\\r\\n    mapping(uint256 => TokenRoyalty) private _tokenRoyalties;\\r\\n    EnumerableSet.UintSet private _tokensWithRoyalties;\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC165, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IERC2981).interfaceId ||\\r\\n            interfaceId == type(IERC721WithRoyalty).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets token royalties. When you override this in the implementation contract\\r\\n     * ensure that you access restrict it to the contract owner or admin\\r\\n     */\\r\\n    function _setTokenRoyalties(TokenRoyaltyConfig[] memory royaltyConfigs)\\r\\n        internal\\r\\n    {\\r\\n        for (uint256 i = 0; i < royaltyConfigs.length; i++) {\\r\\n            TokenRoyaltyConfig memory royaltyConfig = royaltyConfigs[i];\\r\\n            require(royaltyConfig.bps < 10000, \\\"Invalid bps\\\");\\r\\n            if (royaltyConfig.recipient == address(0)) {\\r\\n                delete _tokenRoyalties[royaltyConfig.tokenId];\\r\\n                _tokensWithRoyalties.remove(royaltyConfig.tokenId);\\r\\n                emit TokenRoyaltyRemoved(royaltyConfig.tokenId);\\r\\n            } else {\\r\\n                _tokenRoyalties[royaltyConfig.tokenId] = TokenRoyalty(\\r\\n                    royaltyConfig.recipient,\\r\\n                    royaltyConfig.bps\\r\\n                );\\r\\n                _tokensWithRoyalties.add(royaltyConfig.tokenId);\\r\\n                emit TokenRoyaltySet(\\r\\n                    royaltyConfig.tokenId,\\r\\n                    royaltyConfig.recipient,\\r\\n                    royaltyConfig.bps\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets default royalty. When you override this in the implementation contract\\r\\n     * ensure that you access restrict it to the contract owner or admin\\r\\n     */\\r\\n    function _setDefaultRoyalty(TokenRoyalty memory royalty) internal {\\r\\n        require(royalty.bps < 10000, \\\"Invalid bps\\\");\\r\\n        defaultRoyalty = TokenRoyalty(royalty.recipient, royalty.bps);\\r\\n        emit DefaultRoyaltySet(royalty.recipient, royalty.bps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltiesCount}.\\r\\n     */\\r\\n    function getTokenRoyaltiesCount() external view override returns (uint256) {\\r\\n        return _tokensWithRoyalties.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-getTokenRoyaltyByIndex}.\\r\\n     */\\r\\n    function getTokenRoyaltyByIndex(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (TokenRoyaltyConfig memory)\\r\\n    {\\r\\n        uint256 tokenId = _tokensWithRoyalties.at(index);\\r\\n        TokenRoyalty memory royalty = _tokenRoyalties[tokenId];\\r\\n        return TokenRoyaltyConfig(tokenId, royalty.recipient, royalty.bps);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IEIP2981RoyaltyOverride-royaltyInfo}.\\r\\n     */\\r\\n    function royaltyInfo(uint256 tokenId, uint256 value)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address, uint256)\\r\\n    {\\r\\n        if (_tokenRoyalties[tokenId].recipient != address(0)) {\\r\\n            return (\\r\\n                _tokenRoyalties[tokenId].recipient,\\r\\n                (value * _tokenRoyalties[tokenId].bps) / 10000\\r\\n            );\\r\\n        }\\r\\n        if (defaultRoyalty.recipient != address(0) && defaultRoyalty.bps != 0) {\\r\\n            return (\\r\\n                defaultRoyalty.recipient,\\r\\n                (value * defaultRoyalty.bps) / 10000\\r\\n            );\\r\\n        }\\r\\n        return (address(0), 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ca4a8430889a2f97147cfe4a05d252ca9af88cfce578b28c7c6cc0e3414afc4\",\"license\":\"MIT\"},\"contracts/IERC721WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IERC721WithRoyalty is IERC165 {\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient, uint16 bps);\\n    event DefaultRoyaltySet(address recipient, uint16 bps);\\n\\n    struct TokenRoyalty {\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        address recipient;\\n        uint16 bps;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(TokenRoyaltyConfig[] calldata royalties)\\n        external;\\n\\n    /**\\n     * @dev Get the number of token specific overrides.  Used to enumerate over all configurations\\n     */\\n    function getTokenRoyaltiesCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Get a token royalty configuration by index.  Use in conjunction with getTokenRoyaltiesCount to get all per token configurations\\n     */\\n    function getTokenRoyaltyByIndex(uint256 index)\\n        external\\n        view\\n        returns (TokenRoyaltyConfig memory);\\n\\n    /**\\n     * @dev Set a default royalty configuration.  Will be used if no token specific configuration is set\\n     */\\n    function setDefaultRoyalty(TokenRoyalty calldata royalty) external;\\n}\\n\",\"keccak256\":\"0xa30fe7ca74d0737509d4d682c87ee569332fdb101fd8fa3d4b75c1235e841ff5\",\"license\":\"MIT\"},\"contracts/RoyaltyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport \\\"./ERC721WithRoyalty.sol\\\";\\r\\n\\r\\ncontract RoyaltyFactory {\\r\\n    address[] public allRoyalties;\\r\\n    uint256 royaltyCounter;\\r\\n\\r\\n    event LoyaltyERC721Created(\\r\\n        string name, \\r\\n        string symbol, \\r\\n        address nft, \\r\\n        uint256 initialId, \\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        royaltyCounter = 0;\\r\\n    }\\r\\n\\r\\n    function createRoyaltyERC721(\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps, \\r\\n        string calldata \\r\\n        proofOfAuthenticity\\r\\n    )\\r\\n        external\\r\\n        returns (address loyalty, uint256 counter)\\r\\n    {\\r\\n        ERC721WithRoyalty _loyalty = new ERC721WithRoyalty(name, symbol);\\r\\n\\r\\n        loyalty = address(_loyalty);\\r\\n        allRoyalties.push(loyalty);\\r\\n\\r\\n        _loyalty.mintWithRoyalty(msg.sender, uri, royaltyAddress, bps, proofOfAuthenticity);\\r\\n        emit LoyaltyERC721Created(name, symbol, loyalty, 1, 1);\\r\\n\\r\\n        _loyalty.transferOwnership(msg.sender);\\r\\n\\r\\n        royaltyCounter++;\\r\\n        counter = royaltyCounter;\\r\\n    }\\r\\n\\r\\n    function createRoyaltyERC721Batch(\\r\\n        string memory name,\\r\\n        string calldata symbol, \\r\\n        uint256 amount,\\r\\n        string calldata uri,\\r\\n        address royaltyAddress,\\r\\n        uint16 bps, \\r\\n        string calldata proofOfAuthenticity\\r\\n    )\\r\\n        external\\r\\n        returns (address loyalty, uint256 counter)\\r\\n    {\\r\\n        ERC721WithRoyalty _loyalty = new ERC721WithRoyalty(name, symbol);\\r\\n\\r\\n        loyalty = address(_loyalty);\\r\\n        allRoyalties.push(loyalty);\\r\\n\\r\\n        _loyalty.mintBatchWithRoyalty(msg.sender, amount, uri, royaltyAddress, bps, proofOfAuthenticity);\\r\\n        emit LoyaltyERC721Created(name, symbol, loyalty, 1, amount);\\r\\n\\r\\n        _loyalty.transferOwnership(msg.sender);\\r\\n\\r\\n        royaltyCounter++;\\r\\n        counter = royaltyCounter;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2a646d99a062208fde3bbea1731a43c3c6a117ec0e46511bb5ad8b8827785fda\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000600155613440806100256000396000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c80631d19ae81146200004b5780635e8d42091462000086578063aa18c4c6146200009d575b600080fd5b620000626200005c3660046200050b565b620000cd565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b620000626200009736600462000602565b62000294565b620000b4620000ae366004620006d5565b620003c9565b6040516001600160a01b0390911681526020016200007d565b60008060008c8c8c8c604051620000e490620003f4565b620000f3949392919062000822565b604051809103906000f08015801562000110573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b03831690811790915560405163a8ee88b760e01b81529194508492509063a8ee88b790620001929033908d908d908d908d908d908d9060040162000765565b600060405180830381600087803b158015620001ad57600080fd5b505af1158015620001c2573d6000803e3d6000fd5b505050507f91480b276af62056f954d9732ca1ae43c504671b4596798899785fbc3ff8c3a88d8d8d8d8760018060405162000204979695949392919062000858565b60405180910390a160405163f2fde38b60e01b81523360048201526001600160a01b0382169063f2fde38b90602401600060405180830381600087803b1580156200024e57600080fd5b505af115801562000263573d6000803e3d6000fd5b5050600180549250905060006200027a8362000932565b91905055506001549150509a509a98505050505050505050565b60008060008c8c8c604051620002aa90620003f4565b620002b893929190620008ac565b604051809103906000f080158015620002d5573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b03831690811790915560405163109496e960e21b8152919450849250906342525ba490620003599033908e908e908e908e908e908e908e90600401620007c0565b600060405180830381600087803b1580156200037457600080fd5b505af115801562000389573d6000803e3d6000fd5b505050507f91480b276af62056f954d9732ca1ae43c504671b4596798899785fbc3ff8c3a88d8d8d8660018f6040516200020496959493929190620008e0565b60008181548110620003da57600080fd5b6000918252602090912001546001600160a01b0316905081565b612a9a806200097183390190565b80356001600160a01b03811681146200041a57600080fd5b919050565b60008083601f84011262000431578081fd5b50813567ffffffffffffffff81111562000449578182fd5b6020830191508360208285010111156200046257600080fd5b9250929050565b600082601f8301126200047a578081fd5b813567ffffffffffffffff808211156200049857620004986200095a565b604051601f8301601f19908116603f01168101908282118183101715620004c357620004c36200095a565b81604052838152866020858801011115620004dc578485fd5b8360208701602083013792830160200193909352509392505050565b803561ffff811681146200041a57600080fd5b60008060008060008060008060008060c08b8d0312156200052a578586fd5b8a3567ffffffffffffffff8082111562000542578788fd5b620005508e838f016200041f565b909c509a5060208d013591508082111562000569578788fd5b620005778e838f016200041f565b909a50985060408d013591508082111562000590578788fd5b6200059e8e838f016200041f565b9098509650869150620005b460608e0162000402565b9550620005c460808e01620004f8565b945060a08d0135915080821115620005da578384fd5b50620005e98d828e016200041f565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060008060e08b8d03121562000621578586fd5b8a3567ffffffffffffffff8082111562000639578788fd5b620006478e838f0162000469565b9b5060208d01359150808211156200065d578788fd5b6200066b8e838f016200041f565b909b50995060408d0135985060608d01359150808211156200068b578788fd5b620006998e838f016200041f565b9098509650869150620006af60808e0162000402565b9550620006bf60a08e01620004f8565b945060c08d0135915080821115620005da578384fd5b600060208284031215620006e7578081fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452815b818110156200073e5760208185018101518683018201520162000720565b81811115620007505782602083870101525b50601f01601f19169290920160200192915050565b600060018060a01b03808a16835260a060208401526200078a60a08401898b620006ee565b818816604085015261ffff871660608501528381036080850152620007b1818688620006ee565b9b9a5050505050505050505050565b600060018060a01b03808b16835289602084015260c06040840152620007eb60c08401898b620006ee565b818816606085015261ffff8716608085015283810360a085015262000812818688620006ee565b9c9b505050505050505050505050565b60408152600062000838604083018688620006ee565b82810360208401526200084d818587620006ee565b979650505050505050565b60a0815260006200086e60a08301898b620006ee565b82810360208401526200088381888a620006ee565b6001600160a01b0396909616604084015250506060810192909252608090910152949350505050565b604081526000620008c1604083018662000717565b8281036020840152620008d6818587620006ee565b9695505050505050565b60a081526000620008f560a083018962000717565b82810360208401526200090a81888a620006ee565b6001600160a01b03969096166040840152505060608101929092526080909101529392505050565b60006000198214156200095357634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b5060405162002a9a38038062002a9a833981016040819052620000349162000237565b8151829082906200004d906004906020850190620000de565b50805162000063906005906020840190620000de565b505050620000806200007a6200008860201b60201c565b6200008c565b5050620002f1565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ec906200029e565b90600052602060002090601f0160209004810192826200011057600085556200015b565b82601f106200012b57805160ff19168380011785556200015b565b828001600101855582156200015b579182015b828111156200015b5782518255916020019190600101906200013e565b50620001699291506200016d565b5090565b5b808211156200016957600081556001016200016e565b600082601f83011262000195578081fd5b81516001600160401b0380821115620001b257620001b2620002db565b604051601f8301601f19908116603f01168101908282118183101715620001dd57620001dd620002db565b81604052838152602092508683858801011115620001f9578485fd5b8491505b838210156200021c5785820183015181830184015290820190620001fd565b838211156200022d57848385830101525b9695505050505050565b600080604083850312156200024a578182fd5b82516001600160401b038082111562000261578384fd5b6200026f8683870162000184565b9350602085015191508082111562000285578283fd5b50620002948582860162000184565b9150509250929050565b600181811c90821680620002b357607f821691505b60208210811415620002d557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61279980620003016000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806370a082311161011a578063a8ee88b7116100ad578063d204c45e1161007c578063d204c45e1461049d578063e985e9c5146104b0578063ef60ceaf146104c3578063f2fde38b146104d6578063f6dda936146104e957600080fd5b8063a8ee88b714610451578063b88d4fde14610464578063c87b56dd14610477578063d0def5211461048a57600080fd5b80638da5cb5b116100e95780638da5cb5b1461041857806395d89b4114610429578063a22cb46514610431578063a7d73a5d1461044457600080fd5b806370a08231146103b3578063715018a6146103c65780637885fdc7146103ce5780637e9803421461041057600080fd5b806338400d81116101925780634f558e79116101615780634f558e79146103635780635136dcc71461037657806361bc221a146103895780636352211e146103a057600080fd5b806338400d811461031757806342525ba41461032a57806342842e0e1461033d57806342966c681461035057600080fd5b8063095ea7b3116101ce578063095ea7b3146102aa57806323b872dd146102bf5780632a55205a146102d257806331a997661461030457600080fd5b806301ffc9a7146102005780630653aca51461022857806306fdde031461026a578063081812fc1461027f575b600080fd5b61021361020e3660046122f4565b6104fc565b60405190151581526020015b60405180910390f35b61023b610236366004612441565b61050d565b60408051825181526020808401516001600160a01b0316908201529181015161ffff169082015260600161021f565b610272610592565b60405161021f919061252b565b61029261028d366004612441565b610624565b6040516001600160a01b03909116815260200161021f565b6102bd6102b83660046121b0565b6106be565b005b6102bd6102cd366004611f77565b6107d4565b6102e56102e0366004612459565b610805565b604080516001600160a01b03909316835260208301919091520161021f565b610272610312366004612441565b6108ca565b6102bd61032536600461232c565b61096c565b6102bd6103383660046121d9565b6109a2565b6102bd61034b366004611f77565b610a5a565b6102bd61035e366004612441565b610a75565b610213610371366004612441565b610a81565b6102bd610384366004612284565b610aa0565b610392600c5481565b60405190815260200161021f565b6102926103ae366004612441565b610b29565b6103926103c1366004611f2b565b610ba0565b6102bd610c27565b6000546103ee906001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff90911660208301520161021f565b610392610c5d565b600a546001600160a01b0316610292565b610272610c6e565b6102bd61043f366004612018565b610c7d565b600e546102139060ff1681565b6102bd61045f3660046120a3565b610c88565b6102bd610472366004611fb2565b610d22565b610272610485366004612441565b610d5a565b6102bd610498366004612052565b610e0f565b6102bd6104ab366004612052565b610e2f565b6102136104be366004611f45565b610e79565b6102bd6104d13660046123d0565b610ea7565b6102bd6104e4366004611f2b565b610ee8565b6102bd6104f7366004612145565b610f80565b600061050782610fcb565b92915050565b604080516060810182526000808252602082018190529181018290529061053560028461100b565b6000818152600160209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b6060600480546105a1906126d1565b80601f01602080910402602001604051908101604052809291908181526020018280546105cd906126d1565b801561061a5780601f106105ef5761010080835404028352916020019161061a565b820191906000526020600020905b8154815290600101906020018083116105fd57829003601f168201915b5050505050905090565b6000818152600660205260408120546001600160a01b03166106a25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600860205260409020546001600160a01b031690565b60006106c982610b29565b9050806001600160a01b0316836001600160a01b031614156107375760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610699565b336001600160a01b038216148061075357506107538133610e79565b6107c55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610699565b6107cf838361101e565b505050565b6107de338261108c565b6107fa5760405162461bcd60e51b8152600401610699906125c5565b6107cf838383611163565b60008281526001602052604081205481906001600160a01b03161561086a576000848152600160205260409020546001600160a01b038116906127109061085790600160a01b900461ffff168661269b565b610861919061267b565b915091506108c3565b6000546001600160a01b0316158015906108905750600054600160a01b900461ffff1615155b156108bc576000546001600160a01b038116906127109061085790600160a01b900461ffff168661269b565b5060009050805b9250929050565b6000818152600d602052604090208054606091906108e7906126d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610913906126d1565b80156109605780601f1061093557610100808354040283529160200191610960565b820191906000526020600020905b81548152906001019060200180831161094357829003601f168201915b50505050509050919050565b600a546001600160a01b031633146109965760405162461bcd60e51b815260040161069990612590565b6107cf600f8383611da2565b600a546001600160a01b031633146109cc5760405162461bcd60e51b815260040161069990612590565b6000600c5460016109dd9190612663565b905060005b88811015610a0b576109f98a898989898989611303565b80610a0381612706565b9150506109e2565b507fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d81898b8a8a8a8a604051610a479796959493929190612616565b60405180910390a1505050505050505050565b6107cf83838360405180602001604052806000815250610d22565b610a7e816113ef565b50565b6000818152600660205260408120546001600160a01b03161515610507565b600a546001600160a01b03163314610aca5760405162461bcd60e51b815260040161069990612590565b610b258282808060200260200160405190810160405280939291908181526020016000905b82821015610b1b57610b0c6060830286013681900381019061236c565b81526020019060010190610aef565b505050505061148a565b5050565b6000818152600660205260408120546001600160a01b0316806105075760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610699565b60006001600160a01b038216610c0b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610699565b506001600160a01b031660009081526007602052604090205490565b600a546001600160a01b03163314610c515760405162461bcd60e51b815260040161069990612590565b610c5b600061165d565b565b6000610c6960026116af565b905090565b6060600580546105a1906126d1565b610b253383836116b9565b600a546001600160a01b03163314610cb25760405162461bcd60e51b815260040161069990612590565b6000600c546001610cc39190612663565b9050610cd488888888888888611303565b7fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d8160018a8a8a8a8a604051610d109796959493929190612616565b60405180910390a15050505050505050565b610d2c338361108c565b610d485760405162461bcd60e51b8152600401610699906125c5565b610d5484848484611788565b50505050565b6000818152600660205260409020546060906001600160a01b0316610dd95760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610699565b600e5460ff1615610df157600f80546108e7906126d1565b6000828152600b6020526040902080546108e7906126d1565b919050565b600c54610e1d906001612663565b600c8190556107cf90849084846117bb565b600a546001600160a01b03163314610e595760405162461bcd60e51b815260040161069990612590565b600c54610e67906001612663565b600c8190556107cf90849084846117e5565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b600a546001600160a01b03163314610ed15760405162461bcd60e51b815260040161069990612590565b610a7e610ee3368390038301836123e7565b6117ef565b600a546001600160a01b03163314610f125760405162461bcd60e51b815260040161069990612590565b6001600160a01b038116610f775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610699565b610a7e8161165d565b600a546001600160a01b03163314610faa5760405162461bcd60e51b815260040161069990612590565b600c54610fb8906001612663565b600c819055610d549085908585856118d2565b60006001600160e01b031982166380ac58cd60e01b1480610ffc57506001600160e01b03198216635b5e139f60e01b145b806105075750610507826118fe565b6000611017838361194e565b9392505050565b600081815260086020526040902080546001600160a01b0319166001600160a01b038416908117909155819061105382610b29565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600660205260408120546001600160a01b03166111055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610699565b600061111083610b29565b9050806001600160a01b0316846001600160a01b0316148061114b5750836001600160a01b031661114084610624565b6001600160a01b0316145b8061115b575061115b8185610e79565b949350505050565b826001600160a01b031661117682610b29565b6001600160a01b0316146111de5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610699565b6001600160a01b0382166112405760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610699565b61124b60008261101e565b6001600160a01b03831660009081526007602052604081208054600192906112749084906126ba565b90915550506001600160a01b03821660009081526007602052604081208054600192906112a2908490612663565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54611311906001612663565b600c81905561132390889088886117bb565b604080516001808252818301909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161133a5790505090506040518060600160405280600c548152602001866001600160a01b031681526020018561ffff16815250816000815181106113b457634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113c88161148a565b600c546000908152600d602052604090206113e4908484611da2565b505050505050505050565b60006113fa82610b29565b905061140760008361101e565b6001600160a01b03811660009081526007602052604081208054600192906114309084906126ba565b909155505060008281526006602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60005b8151811015610b255760008282815181106114b857634e487b7160e01b600052603260045260246000fd5b60200260200101519050612710816040015161ffff16106115095760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b6044820152606401610699565b60208101516001600160a01b0316611582578051600090815260016020526040902080546001600160b01b0319169055805161154790600290611986565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a161164a565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152600190945294909220925183549451909216600160a01b026001600160b01b031990941691161791909117905580516115f090600290611992565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b508061165581612706565b91505061148d565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610507825490565b816001600160a01b0316836001600160a01b0316141561171b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610699565b6001600160a01b03838116600081815260096020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611793848484611163565b61179f8484848461199e565b610d545760405162461bcd60e51b81526004016106999061253e565b6117c58484611aab565b6000838152600b602052604090206117de908383611da2565b5050505050565b6117c58484611bed565b612710816020015161ffff16106118365760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b6044820152606401610699565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260008054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe41926118c792916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b6118dd858583611c03565b6000848152600b602052604090206118f6908484611da2565b505050505050565b60006001600160e01b0319821663152a902d60e11b148061192f57506001600160e01b0319821663c69dbd8f60e01b145b8061050757506301ffc9a760e01b6001600160e01b0319831614610507565b600082600001828154811061197357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006110178383611c36565b60006110178383611d53565b60006001600160a01b0384163b15611aa057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119e29033908990889088906004016124ee565b602060405180830381600087803b1580156119fc57600080fd5b505af1925050508015611a2c575060408051601f3d908101601f19168201909252611a2991810190612310565b60015b611a86573d808015611a5a576040519150601f19603f3d011682016040523d82523d6000602084013e611a5f565b606091505b508051611a7e5760405162461bcd60e51b81526004016106999061253e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061115b565b506001949350505050565b6001600160a01b038216611b015760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610699565b6000818152600660205260409020546001600160a01b031615611b665760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610699565b6001600160a01b0382166000908152600760205260408120805460019290611b8f908490612663565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610b258282604051806020016040528060008152505b611c0d8383611aab565b611c1a600084848461199e565b6107cf5760405162461bcd60e51b81526004016106999061253e565b60008181526001830160205260408120548015611d49576000611c5a6001836126ba565b8554909150600090611c6e906001906126ba565b9050818114611cef576000866000018281548110611c9c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611ccd57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d0e57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610507565b6000915050610507565b6000818152600183016020526040812054611d9a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610507565b506000610507565b828054611dae906126d1565b90600052602060002090601f016020900481019282611dd05760008555611e16565b82601f10611de95782800160ff19823516178555611e16565b82800160010185558215611e16579182015b82811115611e16578235825591602001919060010190611dfb565b50611e22929150611e26565b5090565b5b80821115611e225760008155600101611e27565b80356001600160a01b0381168114610e0a57600080fd5b600082601f830112611e62578081fd5b813567ffffffffffffffff80821115611e7d57611e7d612737565b604051601f8301601f19908116603f01168101908282118183101715611ea557611ea5612737565b81604052838152866020858801011115611ebd578485fd5b8360208701602083013792830160200193909352509392505050565b60008083601f840112611eea578182fd5b50813567ffffffffffffffff811115611f01578182fd5b6020830191508360208285010111156108c357600080fd5b803561ffff81168114610e0a57600080fd5b600060208284031215611f3c578081fd5b61101782611e3b565b60008060408385031215611f57578081fd5b611f6083611e3b565b9150611f6e60208401611e3b565b90509250929050565b600080600060608486031215611f8b578081fd5b611f9484611e3b565b9250611fa260208501611e3b565b9150604084013590509250925092565b60008060008060808587031215611fc7578081fd5b611fd085611e3b565b9350611fde60208601611e3b565b925060408501359150606085013567ffffffffffffffff811115612000578182fd5b61200c87828801611e52565b91505092959194509250565b6000806040838503121561202a578182fd5b61203383611e3b565b915060208301358015158114612047578182fd5b809150509250929050565b600080600060408486031215612066578283fd5b61206f84611e3b565b9250602084013567ffffffffffffffff81111561208a578283fd5b61209686828701611ed9565b9497909650939450505050565b600080600080600080600060a0888a0312156120bd578283fd5b6120c688611e3b565b9650602088013567ffffffffffffffff808211156120e2578485fd5b6120ee8b838c01611ed9565b909850965086915061210260408b01611e3b565b955061211060608b01611f19565b945060808a0135915080821115612125578384fd5b506121328a828b01611ed9565b989b979a50959850939692959293505050565b6000806000806060858703121561215a578384fd5b61216385611e3b565b9350602085013567ffffffffffffffff8082111561217f578485fd5b61218b88838901611ed9565b909550935060408701359150808211156121a3578283fd5b5061200c87828801611e52565b600080604083850312156121c2578081fd5b6121cb83611e3b565b946020939093013593505050565b60008060008060008060008060c0898b0312156121f4578182fd5b6121fd89611e3b565b975060208901359650604089013567ffffffffffffffff80821115612220578384fd5b61222c8c838d01611ed9565b909850965086915061224060608c01611e3b565b955061224e60808c01611f19565b945060a08b0135915080821115612263578384fd5b506122708b828c01611ed9565b999c989b5096995094979396929594505050565b60008060208385031215612296578182fd5b823567ffffffffffffffff808211156122ad578384fd5b818501915085601f8301126122c0578384fd5b8135818111156122ce578485fd5b8660206060830285010111156122e2578485fd5b60209290920196919550909350505050565b600060208284031215612305578081fd5b81356110178161274d565b600060208284031215612321578081fd5b81516110178161274d565b6000806020838503121561233e578182fd5b823567ffffffffffffffff811115612354578283fd5b61236085828601611ed9565b90969095509350505050565b60006060828403121561237d578081fd5b6040516060810181811067ffffffffffffffff821117156123a0576123a0612737565b604052823581526123b360208401611e3b565b60208201526123c460408401611f19565b60408201529392505050565b6000604082840312156123e1578081fd5b50919050565b6000604082840312156123f8578081fd5b6040516040810181811067ffffffffffffffff8211171561241b5761241b612737565b60405261242783611e3b565b815261243560208401611f19565b60208201529392505050565b600060208284031215612452578081fd5b5035919050565b6000806040838503121561246b578182fd5b50508035926020909101359150565b60008151808452815b8181101561249f57602081850181015186830182015201612483565b818111156124b05782602083870101525b50601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125219083018461247a565b9695505050505050565b602081526000611017602083018461247a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b878152866020820152600060018060a01b03808816604084015260c0606084015261264560c0840187896124c5565b941660808301525061ffff9190911660a09091015295945050505050565b6000821982111561267657612676612721565b500190565b60008261269657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156126b5576126b5612721565b500290565b6000828210156126cc576126cc612721565b500390565b600181811c908216806126e557607f821691505b602082108114156123e157634e487b7160e01b600052602260045260246000fd5b600060001982141561271a5761271a612721565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610a7e57600080fdfea264697066735822122003209431f4a1db672e7b5202efc5643162abb6afc128bc8e0a96c367be84b93d64736f6c63430008040033a2646970667358221220adee4aff66792b0e5492ca307a372906910737657b3bff9a4864a9243d52960a64736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c80631d19ae81146200004b5780635e8d42091462000086578063aa18c4c6146200009d575b600080fd5b620000626200005c3660046200050b565b620000cd565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b620000626200009736600462000602565b62000294565b620000b4620000ae366004620006d5565b620003c9565b6040516001600160a01b0390911681526020016200007d565b60008060008c8c8c8c604051620000e490620003f4565b620000f3949392919062000822565b604051809103906000f08015801562000110573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b03831690811790915560405163a8ee88b760e01b81529194508492509063a8ee88b790620001929033908d908d908d908d908d908d9060040162000765565b600060405180830381600087803b158015620001ad57600080fd5b505af1158015620001c2573d6000803e3d6000fd5b505050507f91480b276af62056f954d9732ca1ae43c504671b4596798899785fbc3ff8c3a88d8d8d8d8760018060405162000204979695949392919062000858565b60405180910390a160405163f2fde38b60e01b81523360048201526001600160a01b0382169063f2fde38b90602401600060405180830381600087803b1580156200024e57600080fd5b505af115801562000263573d6000803e3d6000fd5b5050600180549250905060006200027a8362000932565b91905055506001549150509a509a98505050505050505050565b60008060008c8c8c604051620002aa90620003f4565b620002b893929190620008ac565b604051809103906000f080158015620002d5573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b03831690811790915560405163109496e960e21b8152919450849250906342525ba490620003599033908e908e908e908e908e908e908e90600401620007c0565b600060405180830381600087803b1580156200037457600080fd5b505af115801562000389573d6000803e3d6000fd5b505050507f91480b276af62056f954d9732ca1ae43c504671b4596798899785fbc3ff8c3a88d8d8d8660018f6040516200020496959493929190620008e0565b60008181548110620003da57600080fd5b6000918252602090912001546001600160a01b0316905081565b612a9a806200097183390190565b80356001600160a01b03811681146200041a57600080fd5b919050565b60008083601f84011262000431578081fd5b50813567ffffffffffffffff81111562000449578182fd5b6020830191508360208285010111156200046257600080fd5b9250929050565b600082601f8301126200047a578081fd5b813567ffffffffffffffff808211156200049857620004986200095a565b604051601f8301601f19908116603f01168101908282118183101715620004c357620004c36200095a565b81604052838152866020858801011115620004dc578485fd5b8360208701602083013792830160200193909352509392505050565b803561ffff811681146200041a57600080fd5b60008060008060008060008060008060c08b8d0312156200052a578586fd5b8a3567ffffffffffffffff8082111562000542578788fd5b620005508e838f016200041f565b909c509a5060208d013591508082111562000569578788fd5b620005778e838f016200041f565b909a50985060408d013591508082111562000590578788fd5b6200059e8e838f016200041f565b9098509650869150620005b460608e0162000402565b9550620005c460808e01620004f8565b945060a08d0135915080821115620005da578384fd5b50620005e98d828e016200041f565b915080935050809150509295989b9194979a5092959850565b60008060008060008060008060008060e08b8d03121562000621578586fd5b8a3567ffffffffffffffff8082111562000639578788fd5b620006478e838f0162000469565b9b5060208d01359150808211156200065d578788fd5b6200066b8e838f016200041f565b909b50995060408d0135985060608d01359150808211156200068b578788fd5b620006998e838f016200041f565b9098509650869150620006af60808e0162000402565b9550620006bf60a08e01620004f8565b945060c08d0135915080821115620005da578384fd5b600060208284031215620006e7578081fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452815b818110156200073e5760208185018101518683018201520162000720565b81811115620007505782602083870101525b50601f01601f19169290920160200192915050565b600060018060a01b03808a16835260a060208401526200078a60a08401898b620006ee565b818816604085015261ffff871660608501528381036080850152620007b1818688620006ee565b9b9a5050505050505050505050565b600060018060a01b03808b16835289602084015260c06040840152620007eb60c08401898b620006ee565b818816606085015261ffff8716608085015283810360a085015262000812818688620006ee565b9c9b505050505050505050505050565b60408152600062000838604083018688620006ee565b82810360208401526200084d818587620006ee565b979650505050505050565b60a0815260006200086e60a08301898b620006ee565b82810360208401526200088381888a620006ee565b6001600160a01b0396909616604084015250506060810192909252608090910152949350505050565b604081526000620008c1604083018662000717565b8281036020840152620008d6818587620006ee565b9695505050505050565b60a081526000620008f560a083018962000717565b82810360208401526200090a81888a620006ee565b6001600160a01b03969096166040840152505060608101929092526080909101529392505050565b60006000198214156200095357634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b5060405162002a9a38038062002a9a833981016040819052620000349162000237565b8151829082906200004d906004906020850190620000de565b50805162000063906005906020840190620000de565b505050620000806200007a6200008860201b60201c565b6200008c565b5050620002f1565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ec906200029e565b90600052602060002090601f0160209004810192826200011057600085556200015b565b82601f106200012b57805160ff19168380011785556200015b565b828001600101855582156200015b579182015b828111156200015b5782518255916020019190600101906200013e565b50620001699291506200016d565b5090565b5b808211156200016957600081556001016200016e565b600082601f83011262000195578081fd5b81516001600160401b0380821115620001b257620001b2620002db565b604051601f8301601f19908116603f01168101908282118183101715620001dd57620001dd620002db565b81604052838152602092508683858801011115620001f9578485fd5b8491505b838210156200021c5785820183015181830184015290820190620001fd565b838211156200022d57848385830101525b9695505050505050565b600080604083850312156200024a578182fd5b82516001600160401b038082111562000261578384fd5b6200026f8683870162000184565b9350602085015191508082111562000285578283fd5b50620002948582860162000184565b9150509250929050565b600181811c90821680620002b357607f821691505b60208210811415620002d557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61279980620003016000396000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806370a082311161011a578063a8ee88b7116100ad578063d204c45e1161007c578063d204c45e1461049d578063e985e9c5146104b0578063ef60ceaf146104c3578063f2fde38b146104d6578063f6dda936146104e957600080fd5b8063a8ee88b714610451578063b88d4fde14610464578063c87b56dd14610477578063d0def5211461048a57600080fd5b80638da5cb5b116100e95780638da5cb5b1461041857806395d89b4114610429578063a22cb46514610431578063a7d73a5d1461044457600080fd5b806370a08231146103b3578063715018a6146103c65780637885fdc7146103ce5780637e9803421461041057600080fd5b806338400d81116101925780634f558e79116101615780634f558e79146103635780635136dcc71461037657806361bc221a146103895780636352211e146103a057600080fd5b806338400d811461031757806342525ba41461032a57806342842e0e1461033d57806342966c681461035057600080fd5b8063095ea7b3116101ce578063095ea7b3146102aa57806323b872dd146102bf5780632a55205a146102d257806331a997661461030457600080fd5b806301ffc9a7146102005780630653aca51461022857806306fdde031461026a578063081812fc1461027f575b600080fd5b61021361020e3660046122f4565b6104fc565b60405190151581526020015b60405180910390f35b61023b610236366004612441565b61050d565b60408051825181526020808401516001600160a01b0316908201529181015161ffff169082015260600161021f565b610272610592565b60405161021f919061252b565b61029261028d366004612441565b610624565b6040516001600160a01b03909116815260200161021f565b6102bd6102b83660046121b0565b6106be565b005b6102bd6102cd366004611f77565b6107d4565b6102e56102e0366004612459565b610805565b604080516001600160a01b03909316835260208301919091520161021f565b610272610312366004612441565b6108ca565b6102bd61032536600461232c565b61096c565b6102bd6103383660046121d9565b6109a2565b6102bd61034b366004611f77565b610a5a565b6102bd61035e366004612441565b610a75565b610213610371366004612441565b610a81565b6102bd610384366004612284565b610aa0565b610392600c5481565b60405190815260200161021f565b6102926103ae366004612441565b610b29565b6103926103c1366004611f2b565b610ba0565b6102bd610c27565b6000546103ee906001600160a01b03811690600160a01b900461ffff1682565b604080516001600160a01b03909316835261ffff90911660208301520161021f565b610392610c5d565b600a546001600160a01b0316610292565b610272610c6e565b6102bd61043f366004612018565b610c7d565b600e546102139060ff1681565b6102bd61045f3660046120a3565b610c88565b6102bd610472366004611fb2565b610d22565b610272610485366004612441565b610d5a565b6102bd610498366004612052565b610e0f565b6102bd6104ab366004612052565b610e2f565b6102136104be366004611f45565b610e79565b6102bd6104d13660046123d0565b610ea7565b6102bd6104e4366004611f2b565b610ee8565b6102bd6104f7366004612145565b610f80565b600061050782610fcb565b92915050565b604080516060810182526000808252602082018190529181018290529061053560028461100b565b6000818152600160209081526040918290208251808401845290546001600160a01b03808216835261ffff600160a01b90920482168385019081528551606081018752968752925116928501929092525116908201529392505050565b6060600480546105a1906126d1565b80601f01602080910402602001604051908101604052809291908181526020018280546105cd906126d1565b801561061a5780601f106105ef5761010080835404028352916020019161061a565b820191906000526020600020905b8154815290600101906020018083116105fd57829003601f168201915b5050505050905090565b6000818152600660205260408120546001600160a01b03166106a25760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600860205260409020546001600160a01b031690565b60006106c982610b29565b9050806001600160a01b0316836001600160a01b031614156107375760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610699565b336001600160a01b038216148061075357506107538133610e79565b6107c55760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610699565b6107cf838361101e565b505050565b6107de338261108c565b6107fa5760405162461bcd60e51b8152600401610699906125c5565b6107cf838383611163565b60008281526001602052604081205481906001600160a01b03161561086a576000848152600160205260409020546001600160a01b038116906127109061085790600160a01b900461ffff168661269b565b610861919061267b565b915091506108c3565b6000546001600160a01b0316158015906108905750600054600160a01b900461ffff1615155b156108bc576000546001600160a01b038116906127109061085790600160a01b900461ffff168661269b565b5060009050805b9250929050565b6000818152600d602052604090208054606091906108e7906126d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610913906126d1565b80156109605780601f1061093557610100808354040283529160200191610960565b820191906000526020600020905b81548152906001019060200180831161094357829003601f168201915b50505050509050919050565b600a546001600160a01b031633146109965760405162461bcd60e51b815260040161069990612590565b6107cf600f8383611da2565b600a546001600160a01b031633146109cc5760405162461bcd60e51b815260040161069990612590565b6000600c5460016109dd9190612663565b905060005b88811015610a0b576109f98a898989898989611303565b80610a0381612706565b9150506109e2565b507fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d81898b8a8a8a8a604051610a479796959493929190612616565b60405180910390a1505050505050505050565b6107cf83838360405180602001604052806000815250610d22565b610a7e816113ef565b50565b6000818152600660205260408120546001600160a01b03161515610507565b600a546001600160a01b03163314610aca5760405162461bcd60e51b815260040161069990612590565b610b258282808060200260200160405190810160405280939291908181526020016000905b82821015610b1b57610b0c6060830286013681900381019061236c565b81526020019060010190610aef565b505050505061148a565b5050565b6000818152600660205260408120546001600160a01b0316806105075760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610699565b60006001600160a01b038216610c0b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610699565b506001600160a01b031660009081526007602052604090205490565b600a546001600160a01b03163314610c515760405162461bcd60e51b815260040161069990612590565b610c5b600061165d565b565b6000610c6960026116af565b905090565b6060600580546105a1906126d1565b610b253383836116b9565b600a546001600160a01b03163314610cb25760405162461bcd60e51b815260040161069990612590565b6000600c546001610cc39190612663565b9050610cd488888888888888611303565b7fd8c86b552ebb0775bba7cb9cc9153d61291ee90bea6fb894183b41ca2ffdb63d8160018a8a8a8a8a604051610d109796959493929190612616565b60405180910390a15050505050505050565b610d2c338361108c565b610d485760405162461bcd60e51b8152600401610699906125c5565b610d5484848484611788565b50505050565b6000818152600660205260409020546060906001600160a01b0316610dd95760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610699565b600e5460ff1615610df157600f80546108e7906126d1565b6000828152600b6020526040902080546108e7906126d1565b919050565b600c54610e1d906001612663565b600c8190556107cf90849084846117bb565b600a546001600160a01b03163314610e595760405162461bcd60e51b815260040161069990612590565b600c54610e67906001612663565b600c8190556107cf90849084846117e5565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b600a546001600160a01b03163314610ed15760405162461bcd60e51b815260040161069990612590565b610a7e610ee3368390038301836123e7565b6117ef565b600a546001600160a01b03163314610f125760405162461bcd60e51b815260040161069990612590565b6001600160a01b038116610f775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610699565b610a7e8161165d565b600a546001600160a01b03163314610faa5760405162461bcd60e51b815260040161069990612590565b600c54610fb8906001612663565b600c819055610d549085908585856118d2565b60006001600160e01b031982166380ac58cd60e01b1480610ffc57506001600160e01b03198216635b5e139f60e01b145b806105075750610507826118fe565b6000611017838361194e565b9392505050565b600081815260086020526040902080546001600160a01b0319166001600160a01b038416908117909155819061105382610b29565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600660205260408120546001600160a01b03166111055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610699565b600061111083610b29565b9050806001600160a01b0316846001600160a01b0316148061114b5750836001600160a01b031661114084610624565b6001600160a01b0316145b8061115b575061115b8185610e79565b949350505050565b826001600160a01b031661117682610b29565b6001600160a01b0316146111de5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610699565b6001600160a01b0382166112405760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610699565b61124b60008261101e565b6001600160a01b03831660009081526007602052604081208054600192906112749084906126ba565b90915550506001600160a01b03821660009081526007602052604081208054600192906112a2908490612663565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54611311906001612663565b600c81905561132390889088886117bb565b604080516001808252818301909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161133a5790505090506040518060600160405280600c548152602001866001600160a01b031681526020018561ffff16815250816000815181106113b457634e487b7160e01b600052603260045260246000fd5b60200260200101819052506113c88161148a565b600c546000908152600d602052604090206113e4908484611da2565b505050505050505050565b60006113fa82610b29565b905061140760008361101e565b6001600160a01b03811660009081526007602052604081208054600192906114309084906126ba565b909155505060008281526006602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60005b8151811015610b255760008282815181106114b857634e487b7160e01b600052603260045260246000fd5b60200260200101519050612710816040015161ffff16106115095760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b6044820152606401610699565b60208101516001600160a01b0316611582578051600090815260016020526040902080546001600160b01b0319169055805161154790600290611986565b5080516040519081527fa2870857763bd9ae76c957f869f16b31c18dd3bb4c7b4d3a4496dc5c57c657f99060200160405180910390a161164a565b6040805180820182526020808401516001600160a01b0390811683528484015161ffff90811683850190815286516000908152600190945294909220925183549451909216600160a01b026001600160b01b031990941691161791909117905580516115f090600290611992565b50805160208083015160408085015181519485526001600160a01b039092169284019290925261ffff1682820152517f389b70fb0887f01e83784eb1c4c589f740eca53b00ed0f45e41db5d079719abb9181900360600190a15b508061165581612706565b91505061148d565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610507825490565b816001600160a01b0316836001600160a01b0316141561171b5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610699565b6001600160a01b03838116600081815260096020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611793848484611163565b61179f8484848461199e565b610d545760405162461bcd60e51b81526004016106999061253e565b6117c58484611aab565b6000838152600b602052604090206117de908383611da2565b5050505050565b6117c58484611bed565b612710816020015161ffff16106118365760405162461bcd60e51b815260206004820152600b60248201526a496e76616c69642062707360a81b6044820152606401610699565b60408051808201825282516001600160a01b03168082526020808501805161ffff169190930181905260008054600160a01b9092026001600160b01b03199092169092171790558251905191517f2c5ea6e4103e78cb101e796fb2dace540362fc542cbff5145eaa24af7dd8fe41926118c792916001600160a01b0392909216825261ffff16602082015260400190565b60405180910390a150565b6118dd858583611c03565b6000848152600b602052604090206118f6908484611da2565b505050505050565b60006001600160e01b0319821663152a902d60e11b148061192f57506001600160e01b0319821663c69dbd8f60e01b145b8061050757506301ffc9a760e01b6001600160e01b0319831614610507565b600082600001828154811061197357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006110178383611c36565b60006110178383611d53565b60006001600160a01b0384163b15611aa057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119e29033908990889088906004016124ee565b602060405180830381600087803b1580156119fc57600080fd5b505af1925050508015611a2c575060408051601f3d908101601f19168201909252611a2991810190612310565b60015b611a86573d808015611a5a576040519150601f19603f3d011682016040523d82523d6000602084013e611a5f565b606091505b508051611a7e5760405162461bcd60e51b81526004016106999061253e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061115b565b506001949350505050565b6001600160a01b038216611b015760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610699565b6000818152600660205260409020546001600160a01b031615611b665760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610699565b6001600160a01b0382166000908152600760205260408120805460019290611b8f908490612663565b909155505060008181526006602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610b258282604051806020016040528060008152505b611c0d8383611aab565b611c1a600084848461199e565b6107cf5760405162461bcd60e51b81526004016106999061253e565b60008181526001830160205260408120548015611d49576000611c5a6001836126ba565b8554909150600090611c6e906001906126ba565b9050818114611cef576000866000018281548110611c9c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611ccd57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611d0e57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610507565b6000915050610507565b6000818152600183016020526040812054611d9a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610507565b506000610507565b828054611dae906126d1565b90600052602060002090601f016020900481019282611dd05760008555611e16565b82601f10611de95782800160ff19823516178555611e16565b82800160010185558215611e16579182015b82811115611e16578235825591602001919060010190611dfb565b50611e22929150611e26565b5090565b5b80821115611e225760008155600101611e27565b80356001600160a01b0381168114610e0a57600080fd5b600082601f830112611e62578081fd5b813567ffffffffffffffff80821115611e7d57611e7d612737565b604051601f8301601f19908116603f01168101908282118183101715611ea557611ea5612737565b81604052838152866020858801011115611ebd578485fd5b8360208701602083013792830160200193909352509392505050565b60008083601f840112611eea578182fd5b50813567ffffffffffffffff811115611f01578182fd5b6020830191508360208285010111156108c357600080fd5b803561ffff81168114610e0a57600080fd5b600060208284031215611f3c578081fd5b61101782611e3b565b60008060408385031215611f57578081fd5b611f6083611e3b565b9150611f6e60208401611e3b565b90509250929050565b600080600060608486031215611f8b578081fd5b611f9484611e3b565b9250611fa260208501611e3b565b9150604084013590509250925092565b60008060008060808587031215611fc7578081fd5b611fd085611e3b565b9350611fde60208601611e3b565b925060408501359150606085013567ffffffffffffffff811115612000578182fd5b61200c87828801611e52565b91505092959194509250565b6000806040838503121561202a578182fd5b61203383611e3b565b915060208301358015158114612047578182fd5b809150509250929050565b600080600060408486031215612066578283fd5b61206f84611e3b565b9250602084013567ffffffffffffffff81111561208a578283fd5b61209686828701611ed9565b9497909650939450505050565b600080600080600080600060a0888a0312156120bd578283fd5b6120c688611e3b565b9650602088013567ffffffffffffffff808211156120e2578485fd5b6120ee8b838c01611ed9565b909850965086915061210260408b01611e3b565b955061211060608b01611f19565b945060808a0135915080821115612125578384fd5b506121328a828b01611ed9565b989b979a50959850939692959293505050565b6000806000806060858703121561215a578384fd5b61216385611e3b565b9350602085013567ffffffffffffffff8082111561217f578485fd5b61218b88838901611ed9565b909550935060408701359150808211156121a3578283fd5b5061200c87828801611e52565b600080604083850312156121c2578081fd5b6121cb83611e3b565b946020939093013593505050565b60008060008060008060008060c0898b0312156121f4578182fd5b6121fd89611e3b565b975060208901359650604089013567ffffffffffffffff80821115612220578384fd5b61222c8c838d01611ed9565b909850965086915061224060608c01611e3b565b955061224e60808c01611f19565b945060a08b0135915080821115612263578384fd5b506122708b828c01611ed9565b999c989b5096995094979396929594505050565b60008060208385031215612296578182fd5b823567ffffffffffffffff808211156122ad578384fd5b818501915085601f8301126122c0578384fd5b8135818111156122ce578485fd5b8660206060830285010111156122e2578485fd5b60209290920196919550909350505050565b600060208284031215612305578081fd5b81356110178161274d565b600060208284031215612321578081fd5b81516110178161274d565b6000806020838503121561233e578182fd5b823567ffffffffffffffff811115612354578283fd5b61236085828601611ed9565b90969095509350505050565b60006060828403121561237d578081fd5b6040516060810181811067ffffffffffffffff821117156123a0576123a0612737565b604052823581526123b360208401611e3b565b60208201526123c460408401611f19565b60408201529392505050565b6000604082840312156123e1578081fd5b50919050565b6000604082840312156123f8578081fd5b6040516040810181811067ffffffffffffffff8211171561241b5761241b612737565b60405261242783611e3b565b815261243560208401611f19565b60208201529392505050565b600060208284031215612452578081fd5b5035919050565b6000806040838503121561246b578182fd5b50508035926020909101359150565b60008151808452815b8181101561249f57602081850181015186830182015201612483565b818111156124b05782602083870101525b50601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125219083018461247a565b9695505050505050565b602081526000611017602083018461247a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b878152866020820152600060018060a01b03808816604084015260c0606084015261264560c0840187896124c5565b941660808301525061ffff9190911660a09091015295945050505050565b6000821982111561267657612676612721565b500190565b60008261269657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156126b5576126b5612721565b500290565b6000828210156126cc576126cc612721565b500390565b600181811c908216806126e557607f821691505b602082108114156123e157634e487b7160e01b600052602260045260246000fd5b600060001982141561271a5761271a612721565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610a7e57600080fdfea264697066735822122003209431f4a1db672e7b5202efc5643162abb6afc128bc8e0a96c367be84b93d64736f6c63430008040033a2646970667358221220adee4aff66792b0e5492ca307a372906910737657b3bff9a4864a9243d52960a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3186,
        "contract": "contracts/RoyaltyFactory.sol:RoyaltyFactory",
        "label": "allRoyalties",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3188,
        "contract": "contracts/RoyaltyFactory.sol:RoyaltyFactory",
        "label": "royaltyCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}